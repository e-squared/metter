# encoding: utf-8
# Autogenerated from a Treetop grammar. Edits may be lost.


require File.expand_path("../dating_nodes", __FILE__)
require File.expand_path("../dating_include", __FILE__)

module Dating
  include Treetop::Runtime

  def root
    @root ||= :expression
  end

  include Dating::Include

  module Expression0
    def delimiter
      elements[0]
    end

    def other
      elements[1]
    end
  end

  module Expression1
    def first
      elements[1]
    end

    def rest
      elements[2]
    end

    def ce
      elements[3]
    end

    def co
      elements[4]
    end

  end

  module Expression2
    def eval(env = {})
      dates     = [first.eval(env), *rest.elements.map { |element| element.other.eval(env) }]
      certainty = ce.empty? ? 100 : ce.eval(env)
      comment   = co.empty? ? nil : co.eval(env)

      Dating::ParseResult.new dates, certainty, comment
    end
  end

  def _nt_expression
    start_index = index
    if node_cache[:expression].has_key?(index)
      cached = node_cache[:expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_space
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      r3 = _nt_dating
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          i5, s5 = index, []
          r6 = _nt_delimiter
          s5 << r6
          if r6
            r7 = _nt_dating
            s5 << r7
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(Expression0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
        if r4
          r9 = _nt_certainty
          if r9
            r8 = r9
          else
            r8 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r8
          if r8
            r11 = _nt_comment
            if r11
              r10 = r11
            else
              r10 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r10
            if r10
              s12, i12 = [], index
              loop do
                r13 = _nt_space
                if r13
                  s12 << r13
                else
                  break
                end
              end
              r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
              s0 << r12
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Expression1)
      r0.extend(Expression2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:expression][start_index] = r0

    r0
  end

  module Certainty0
    def space
      elements[0]
    end

    def numeric
      elements[3]
    end

  end

  module Certainty1
    def eval(env = {})
      degree = numeric.eval(env)

      result =
        if degree < 1
          degree * 100
        elsif degree > 1
          degree
        else
          text_value =~ /%/ ? degree : degree * 100
        end

      result.to_i
    end
  end

  def _nt_certainty
    start_index = index
    if node_cache[:certainty].has_key?(index)
      cached = node_cache[:certainty][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_space
    s0 << r1
    if r1
      if has_terminal?('@', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('@')
        r2 = nil
      end
      s0 << r2
      if r2
        r4 = _nt_space
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
        if r3
          r5 = _nt_numeric
          s0 << r5
          if r5
            if has_terminal?('%', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('%')
              r7 = nil
            end
            if r7
              r6 = r7
            else
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r6
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Certainty0)
      r0.extend(Certainty1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:certainty][start_index] = r0

    r0
  end

  module Comment0
    def space
      elements[0]
    end

    def c
      elements[2]
    end
  end

  module Comment1
    def eval(env = {})
      if c.text_value =~ /^\s*\]?\s*$/
        nil
      else
        c.text_value.strip.gsub(/\s*\]$/, '')
      end
    end
  end

  def _nt_comment
    start_index = index
    if node_cache[:comment].has_key?(index)
      cached = node_cache[:comment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_space
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('#', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('#')
        r3 = nil
      end
      if r3
        r2 = r3
      else
        if has_terminal?('[', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('[')
          r4 = nil
        end
        if r4
          r2 = r4
        else
          @index = i2
          r2 = nil
        end
      end
      s0 << r2
      if r2
        s5, i5 = [], index
        loop do
          if index < input_length
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Comment0)
      r0.extend(Comment1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comment][start_index] = r0

    r0
  end

  def _nt_dating
    start_index = index
    if node_cache[:dating].has_key?(index)
      cached = node_cache[:dating][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_beginning_of_month
    if r1
      r0 = r1
    else
      r2 = _nt_middle_of_month
      if r2
        r0 = r2
      else
        r3 = _nt_end_of_month
        if r3
          r0 = r3
        else
          r4 = _nt_beginning_of_year
          if r4
            r0 = r4
          else
            r5 = _nt_middle_of_year
            if r5
              r0 = r5
            else
              r6 = _nt_end_of_year
              if r6
                r0 = r6
              else
                r7 = _nt_day_month_year_to_day_month_year
                if r7
                  r0 = r7
                else
                  r8 = _nt_day_month_to_day_month_year
                  if r8
                    r0 = r8
                  else
                    r9 = _nt_day_month_year
                    if r9
                      r0 = r9
                    else
                      r10 = _nt_day_to_day_month_year
                      if r10
                        r0 = r10
                      else
                        r11 = _nt_month_year_to_month_year
                        if r11
                          r0 = r11
                        else
                          r12 = _nt_month_to_month_year
                          if r12
                            r0 = r12
                          else
                            r13 = _nt_month_year
                            if r13
                              r0 = r13
                            else
                              r14 = _nt_holiday_year
                              if r14
                                r0 = r14
                              else
                                r15 = _nt_year_only
                                if r15
                                  r0 = r15
                                else
                                  @index = i0
                                  r0 = nil
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:dating][start_index] = r0

    r0
  end

  module Delimiter0
    def space
      elements[2]
    end
  end

  module Delimiter1
    def space1
      elements[0]
    end

    def space2
      elements[2]
    end
  end

  def _nt_delimiter
    start_index = index
    if node_cache[:delimiter].has_key?(index)
      cached = node_cache[:delimiter][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r3 = _nt_space
    if r3
      r2 = r3
    else
      r2 = instantiate_node(SyntaxNode,input, index...index)
    end
    s1 << r2
    if r2
      if has_terminal?('\G[,;/]', true, index)
        r4 = true
        @index += 1
      else
        r4 = nil
      end
      s1 << r4
      if r4
        r5 = _nt_space
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Delimiter0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i6, s6 = index, []
      r7 = _nt_space
      s6 << r7
      if r7
        if has_terminal?('and', false, index)
          r8 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure('and')
          r8 = nil
        end
        s6 << r8
        if r8
          r9 = _nt_space
          s6 << r9
        end
      end
      if s6.last
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        r6.extend(Delimiter1)
      else
        @index = i6
        r6 = nil
      end
      if r6
        r0 = r6
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:delimiter][start_index] = r0

    r0
  end

  module DayMonthYear0
    def day
      elements[0]
    end

    def month
      elements[2]
    end

    def year
      elements[4]
    end
  end

  module DayMonthYear1
    def month
      elements[0]
    end

    def day
      elements[2]
    end

    def year
      elements[4]
    end
  end

  module DayMonthYear2
    def month
      elements[0]
    end

    def day
      elements[2]
    end

    def year
      elements[4]
    end
  end

  module DayMonthYear3
    def space
      elements[1]
    end
  end

  module DayMonthYear4
    def space
      elements[1]
    end
  end

  module DayMonthYear5
  end

  module DayMonthYear6
    def day_of_week_prefix
      elements[0]
    end

    def day
      elements[2]
    end

    def space
      elements[3]
    end

    def month
      elements[5]
    end

    def year
      elements[7]
    end
  end

  module DayMonthYear7
    def space
      elements[1]
    end
  end

  module DayMonthYear8
    def space
      elements[2]
    end
  end

  module DayMonthYear9
    def day_of_week_prefix
      elements[0]
    end

    def month
      elements[1]
    end

    def space
      elements[2]
    end

    def day
      elements[4]
    end

    def year
      elements[6]
    end
  end

  module DayMonthYear10
    def year
      elements[0]
    end

    def month
      elements[2]
    end

    def day
      elements[4]
    end
  end

  def _nt_day_month_year
    start_index = index
    if node_cache[:day_month_year].has_key?(index)
      cached = node_cache[:day_month_year][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_day_number
    s1 << r2
    if r2
      if has_terminal?('/', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('/')
        r3 = nil
      end
      s1 << r3
      if r3
        r4 = _nt_month_name
        s1 << r4
        if r4
          if has_terminal?('/', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('/')
            r5 = nil
          end
          s1 << r5
          if r5
            r6 = _nt_year
            s1 << r6
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(DayMonthYear,input, i1...index, s1)
      r1.extend(DayMonthYear0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      r8 = _nt_month_number
      s7 << r8
      if r8
        if has_terminal?('/', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('/')
          r9 = nil
        end
        s7 << r9
        if r9
          r10 = _nt_day_number
          s7 << r10
          if r10
            if has_terminal?('/', false, index)
              r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('/')
              r11 = nil
            end
            s7 << r11
            if r11
              r12 = _nt_year
              s7 << r12
            end
          end
        end
      end
      if s7.last
        r7 = instantiate_node(DayMonthYear,input, i7...index, s7)
        r7.extend(DayMonthYear1)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        i13, s13 = index, []
        r14 = _nt_month_number
        s13 << r14
        if r14
          if has_terminal?('.', false, index)
            r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('.')
            r15 = nil
          end
          s13 << r15
          if r15
            r16 = _nt_day_number
            s13 << r16
            if r16
              if has_terminal?('.', false, index)
                r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('.')
                r17 = nil
              end
              s13 << r17
              if r17
                r18 = _nt_year
                s13 << r18
              end
            end
          end
        end
        if s13.last
          r13 = instantiate_node(DayMonthYear,input, i13...index, s13)
          r13.extend(DayMonthYear2)
        else
          @index = i13
          r13 = nil
        end
        if r13
          r0 = r13
        else
          i19, s19 = index, []
          r20 = _nt_day_of_week_prefix
          s19 << r20
          if r20
            i22, s22 = index, []
            if has_terminal?('the', false, index)
              r23 = instantiate_node(SyntaxNode,input, index...(index + 3))
              @index += 3
            else
              terminal_parse_failure('the')
              r23 = nil
            end
            s22 << r23
            if r23
              r24 = _nt_space
              s22 << r24
            end
            if s22.last
              r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
              r22.extend(DayMonthYear3)
            else
              @index = i22
              r22 = nil
            end
            if r22
              r21 = r22
            else
              r21 = instantiate_node(SyntaxNode,input, index...index)
            end
            s19 << r21
            if r21
              r25 = _nt_day
              s19 << r25
              if r25
                r26 = _nt_space
                s19 << r26
                if r26
                  i28, s28 = index, []
                  if has_terminal?('of', false, index)
                    r29 = instantiate_node(SyntaxNode,input, index...(index + 2))
                    @index += 2
                  else
                    terminal_parse_failure('of')
                    r29 = nil
                  end
                  s28 << r29
                  if r29
                    r30 = _nt_space
                    s28 << r30
                  end
                  if s28.last
                    r28 = instantiate_node(SyntaxNode,input, i28...index, s28)
                    r28.extend(DayMonthYear4)
                  else
                    @index = i28
                    r28 = nil
                  end
                  if r28
                    r27 = r28
                  else
                    r27 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s19 << r27
                  if r27
                    r31 = _nt_month_name
                    s19 << r31
                    if r31
                      i32 = index
                      r33 = _nt_space
                      if r33
                        r32 = r33
                      else
                        i34, s34 = index, []
                        r36 = _nt_space
                        if r36
                          r35 = r36
                        else
                          r35 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s34 << r35
                        if r35
                          if has_terminal?(',', false, index)
                            r37 = instantiate_node(SyntaxNode,input, index...(index + 1))
                            @index += 1
                          else
                            terminal_parse_failure(',')
                            r37 = nil
                          end
                          s34 << r37
                          if r37
                            r39 = _nt_space
                            if r39
                              r38 = r39
                            else
                              r38 = instantiate_node(SyntaxNode,input, index...index)
                            end
                            s34 << r38
                          end
                        end
                        if s34.last
                          r34 = instantiate_node(SyntaxNode,input, i34...index, s34)
                          r34.extend(DayMonthYear5)
                        else
                          @index = i34
                          r34 = nil
                        end
                        if r34
                          r32 = r34
                        else
                          @index = i32
                          r32 = nil
                        end
                      end
                      s19 << r32
                      if r32
                        r40 = _nt_year
                        s19 << r40
                      end
                    end
                  end
                end
              end
            end
          end
          if s19.last
            r19 = instantiate_node(DayMonthYear,input, i19...index, s19)
            r19.extend(DayMonthYear6)
          else
            @index = i19
            r19 = nil
          end
          if r19
            r0 = r19
          else
            i41, s41 = index, []
            r42 = _nt_day_of_week_prefix
            s41 << r42
            if r42
              r43 = _nt_month_name
              s41 << r43
              if r43
                r44 = _nt_space
                s41 << r44
                if r44
                  i46, s46 = index, []
                  if has_terminal?('the', false, index)
                    r47 = instantiate_node(SyntaxNode,input, index...(index + 3))
                    @index += 3
                  else
                    terminal_parse_failure('the')
                    r47 = nil
                  end
                  s46 << r47
                  if r47
                    r48 = _nt_space
                    s46 << r48
                  end
                  if s46.last
                    r46 = instantiate_node(SyntaxNode,input, i46...index, s46)
                    r46.extend(DayMonthYear7)
                  else
                    @index = i46
                    r46 = nil
                  end
                  if r46
                    r45 = r46
                  else
                    r45 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s41 << r45
                  if r45
                    r49 = _nt_day
                    s41 << r49
                    if r49
                      i50 = index
                      r51 = _nt_space
                      if r51
                        r50 = r51
                      else
                        i52, s52 = index, []
                        r54 = _nt_space
                        if r54
                          r53 = r54
                        else
                          r53 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s52 << r53
                        if r53
                          if has_terminal?(',', false, index)
                            r55 = instantiate_node(SyntaxNode,input, index...(index + 1))
                            @index += 1
                          else
                            terminal_parse_failure(',')
                            r55 = nil
                          end
                          s52 << r55
                          if r55
                            r56 = _nt_space
                            s52 << r56
                          end
                        end
                        if s52.last
                          r52 = instantiate_node(SyntaxNode,input, i52...index, s52)
                          r52.extend(DayMonthYear8)
                        else
                          @index = i52
                          r52 = nil
                        end
                        if r52
                          r50 = r52
                        else
                          @index = i50
                          r50 = nil
                        end
                      end
                      s41 << r50
                      if r50
                        r57 = _nt_year
                        s41 << r57
                      end
                    end
                  end
                end
              end
            end
            if s41.last
              r41 = instantiate_node(DayMonthYear,input, i41...index, s41)
              r41.extend(DayMonthYear9)
            else
              @index = i41
              r41 = nil
            end
            if r41
              r0 = r41
            else
              i58, s58 = index, []
              r59 = _nt_year
              s58 << r59
              if r59
                if has_terminal?('-', false, index)
                  r60 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('-')
                  r60 = nil
                end
                s58 << r60
                if r60
                  r61 = _nt_month_number
                  s58 << r61
                  if r61
                    if has_terminal?('-', false, index)
                      r62 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure('-')
                      r62 = nil
                    end
                    s58 << r62
                    if r62
                      r63 = _nt_day
                      s58 << r63
                    end
                  end
                end
              end
              if s58.last
                r58 = instantiate_node(DayMonthYear,input, i58...index, s58)
                r58.extend(DayMonthYear10)
              else
                @index = i58
                r58 = nil
              end
              if r58
                r0 = r58
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end
    end

    node_cache[:day_month_year][start_index] = r0

    r0
  end

  module MonthYear0
    def month
      elements[0]
    end

    def unknown
      elements[2]
    end

    def year
      elements[4]
    end
  end

  module MonthYear1
    def space
      elements[1]
    end
  end

  module MonthYear2
    def unknown
      elements[0]
    end

    def space1
      elements[1]
    end

    def month
      elements[3]
    end

    def space2
      elements[4]
    end

    def year
      elements[5]
    end
  end

  module MonthYear3
    def space
      elements[1]
    end
  end

  module MonthYear4
    def month
      elements[0]
    end

    def space
      elements[1]
    end

    def unknown
      elements[3]
    end

    def year
      elements[7]
    end
  end

  module MonthYear5
    def year
      elements[0]
    end

    def month
      elements[2]
    end

    def unknown
      elements[4]
    end
  end

  module MonthYear6
    def month
      elements[0]
    end

    def space
      elements[1]
    end

    def year
      elements[2]
    end
  end

  module MonthYear7
    def month
      elements[0]
    end

    def year
      elements[2]
    end
  end

  def _nt_month_year
    start_index = index
    if node_cache[:month_year].has_key?(index)
      cached = node_cache[:month_year][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_month_number
    s1 << r2
    if r2
      if has_terminal?('/', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('/')
        r3 = nil
      end
      s1 << r3
      if r3
        r4 = _nt_unknown
        s1 << r4
        if r4
          if has_terminal?('/', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('/')
            r5 = nil
          end
          s1 << r5
          if r5
            r6 = _nt_year
            s1 << r6
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(MonthYear,input, i1...index, s1)
      r1.extend(MonthYear0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      r8 = _nt_unknown
      s7 << r8
      if r8
        r9 = _nt_space
        s7 << r9
        if r9
          i11, s11 = index, []
          if has_terminal?('of', false, index)
            r12 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('of')
            r12 = nil
          end
          s11 << r12
          if r12
            r13 = _nt_space
            s11 << r13
          end
          if s11.last
            r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
            r11.extend(MonthYear1)
          else
            @index = i11
            r11 = nil
          end
          if r11
            r10 = r11
          else
            r10 = instantiate_node(SyntaxNode,input, index...index)
          end
          s7 << r10
          if r10
            r14 = _nt_month_name
            s7 << r14
            if r14
              r15 = _nt_space
              s7 << r15
              if r15
                r16 = _nt_year
                s7 << r16
              end
            end
          end
        end
      end
      if s7.last
        r7 = instantiate_node(MonthYear,input, i7...index, s7)
        r7.extend(MonthYear2)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        i17, s17 = index, []
        r18 = _nt_month_name
        s17 << r18
        if r18
          r19 = _nt_space
          s17 << r19
          if r19
            i21, s21 = index, []
            if has_terminal?('the', false, index)
              r22 = instantiate_node(SyntaxNode,input, index...(index + 3))
              @index += 3
            else
              terminal_parse_failure('the')
              r22 = nil
            end
            s21 << r22
            if r22
              r23 = _nt_space
              s21 << r23
            end
            if s21.last
              r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
              r21.extend(MonthYear3)
            else
              @index = i21
              r21 = nil
            end
            if r21
              r20 = r21
            else
              r20 = instantiate_node(SyntaxNode,input, index...index)
            end
            s17 << r20
            if r20
              r24 = _nt_unknown
              s17 << r24
              if r24
                r26 = _nt_space
                if r26
                  r25 = r26
                else
                  r25 = instantiate_node(SyntaxNode,input, index...index)
                end
                s17 << r25
                if r25
                  if has_terminal?(',', false, index)
                    r27 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(',')
                    r27 = nil
                  end
                  s17 << r27
                  if r27
                    r29 = _nt_space
                    if r29
                      r28 = r29
                    else
                      r28 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s17 << r28
                    if r28
                      r30 = _nt_year
                      s17 << r30
                    end
                  end
                end
              end
            end
          end
        end
        if s17.last
          r17 = instantiate_node(MonthYear,input, i17...index, s17)
          r17.extend(MonthYear4)
        else
          @index = i17
          r17 = nil
        end
        if r17
          r0 = r17
        else
          i31, s31 = index, []
          r32 = _nt_year
          s31 << r32
          if r32
            if has_terminal?('-', false, index)
              r33 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('-')
              r33 = nil
            end
            s31 << r33
            if r33
              r34 = _nt_month_number
              s31 << r34
              if r34
                if has_terminal?('-', false, index)
                  r35 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('-')
                  r35 = nil
                end
                s31 << r35
                if r35
                  r36 = _nt_unknown
                  s31 << r36
                end
              end
            end
          end
          if s31.last
            r31 = instantiate_node(MonthYear,input, i31...index, s31)
            r31.extend(MonthYear5)
          else
            @index = i31
            r31 = nil
          end
          if r31
            r0 = r31
          else
            i37, s37 = index, []
            r38 = _nt_month_name
            s37 << r38
            if r38
              r39 = _nt_space
              s37 << r39
              if r39
                r40 = _nt_year
                s37 << r40
              end
            end
            if s37.last
              r37 = instantiate_node(MonthYear,input, i37...index, s37)
              r37.extend(MonthYear6)
            else
              @index = i37
              r37 = nil
            end
            if r37
              r0 = r37
            else
              i41, s41 = index, []
              r42 = _nt_month_number
              s41 << r42
              if r42
                if has_terminal?('/', false, index)
                  r43 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('/')
                  r43 = nil
                end
                s41 << r43
                if r43
                  r44 = _nt_year
                  s41 << r44
                end
              end
              if s41.last
                r41 = instantiate_node(MonthYear,input, i41...index, s41)
                r41.extend(MonthYear7)
              else
                @index = i41
                r41 = nil
              end
              if r41
                r0 = r41
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end
    end

    node_cache[:month_year][start_index] = r0

    r0
  end

  module YearOnly0
    def year
      elements[0]
    end

    def unknown1
      elements[2]
    end

    def unknown2
      elements[4]
    end
  end

  module YearOnly1
    def unknown1
      elements[0]
    end

    def unknown2
      elements[2]
    end

    def year
      elements[4]
    end
  end

  module YearOnly2
  end

  module YearOnly3
    def unknown1
      elements[0]
    end

    def space
      elements[1]
    end

    def unknown2
      elements[2]
    end

    def year
      elements[4]
    end
  end

  module YearOnly4
    def year
      elements[1]
    end
  end

  def _nt_year_only
    start_index = index
    if node_cache[:year_only].has_key?(index)
      cached = node_cache[:year_only][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_year
    s1 << r2
    if r2
      if has_terminal?('-', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('-')
        r3 = nil
      end
      s1 << r3
      if r3
        r4 = _nt_unknown
        s1 << r4
        if r4
          if has_terminal?('-', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('-')
            r5 = nil
          end
          s1 << r5
          if r5
            r6 = _nt_unknown
            s1 << r6
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(YearOnly,input, i1...index, s1)
      r1.extend(YearOnly0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      r8 = _nt_unknown
      s7 << r8
      if r8
        if has_terminal?('/', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('/')
          r9 = nil
        end
        s7 << r9
        if r9
          r10 = _nt_unknown
          s7 << r10
          if r10
            if has_terminal?('/', false, index)
              r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('/')
              r11 = nil
            end
            s7 << r11
            if r11
              r12 = _nt_year
              s7 << r12
            end
          end
        end
      end
      if s7.last
        r7 = instantiate_node(YearOnly,input, i7...index, s7)
        r7.extend(YearOnly1)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        i13, s13 = index, []
        r14 = _nt_unknown
        s13 << r14
        if r14
          r15 = _nt_space
          s13 << r15
          if r15
            r16 = _nt_unknown
            s13 << r16
            if r16
              i17 = index
              r18 = _nt_space
              if r18
                r17 = r18
              else
                i19, s19 = index, []
                r21 = _nt_space
                if r21
                  r20 = r21
                else
                  r20 = instantiate_node(SyntaxNode,input, index...index)
                end
                s19 << r20
                if r20
                  if has_terminal?(',', false, index)
                    r22 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(',')
                    r22 = nil
                  end
                  s19 << r22
                  if r22
                    r24 = _nt_space
                    if r24
                      r23 = r24
                    else
                      r23 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s19 << r23
                  end
                end
                if s19.last
                  r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
                  r19.extend(YearOnly2)
                else
                  @index = i19
                  r19 = nil
                end
                if r19
                  r17 = r19
                else
                  @index = i17
                  r17 = nil
                end
              end
              s13 << r17
              if r17
                r25 = _nt_year
                s13 << r25
              end
            end
          end
        end
        if s13.last
          r13 = instantiate_node(YearOnly,input, i13...index, s13)
          r13.extend(YearOnly3)
        else
          @index = i13
          r13 = nil
        end
        if r13
          r0 = r13
        else
          i26, s26 = index, []
          if has_terminal?('', false, index)
            r27 = instantiate_node(SyntaxNode,input, index...(index + 0))
            @index += 0
          else
            terminal_parse_failure('')
            r27 = nil
          end
          s26 << r27
          if r27
            r28 = _nt_year
            s26 << r28
          end
          if s26.last
            r26 = instantiate_node(YearOnly,input, i26...index, s26)
            r26.extend(YearOnly4)
          else
            @index = i26
            r26 = nil
          end
          if r26
            r0 = r26
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:year_only][start_index] = r0

    r0
  end

  module BeginningOfMonth0
  end

  module BeginningOfMonth1
    def beginning_of
      elements[0]
    end

    def month
      elements[1]
    end

    def year
      elements[3]
    end
  end

  def _nt_beginning_of_month
    start_index = index
    if node_cache[:beginning_of_month].has_key?(index)
      cached = node_cache[:beginning_of_month][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_beginning_of
    s0 << r1
    if r1
      r2 = _nt_month
      s0 << r2
      if r2
        i3 = index
        i4, s4 = index, []
        r6 = _nt_space
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          if has_terminal?(',', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(',')
            r7 = nil
          end
          s4 << r7
          if r7
            r9 = _nt_space
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r8
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(BeginningOfMonth0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          r10 = _nt_space
          if r10
            r3 = r10
          else
            @index = i3
            r3 = nil
          end
        end
        s0 << r3
        if r3
          r11 = _nt_year
          s0 << r11
        end
      end
    end
    if s0.last
      r0 = instantiate_node(BeginningOfMonth,input, i0...index, s0)
      r0.extend(BeginningOfMonth1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:beginning_of_month][start_index] = r0

    r0
  end

  module MiddleOfMonth0
  end

  module MiddleOfMonth1
    def middle_of
      elements[0]
    end

    def month
      elements[1]
    end

    def year
      elements[3]
    end
  end

  def _nt_middle_of_month
    start_index = index
    if node_cache[:middle_of_month].has_key?(index)
      cached = node_cache[:middle_of_month][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_middle_of
    s0 << r1
    if r1
      r2 = _nt_month
      s0 << r2
      if r2
        i3 = index
        i4, s4 = index, []
        r6 = _nt_space
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          if has_terminal?(',', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(',')
            r7 = nil
          end
          s4 << r7
          if r7
            r9 = _nt_space
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r8
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(MiddleOfMonth0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          r10 = _nt_space
          if r10
            r3 = r10
          else
            @index = i3
            r3 = nil
          end
        end
        s0 << r3
        if r3
          r11 = _nt_year
          s0 << r11
        end
      end
    end
    if s0.last
      r0 = instantiate_node(MiddleOfMonth,input, i0...index, s0)
      r0.extend(MiddleOfMonth1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:middle_of_month][start_index] = r0

    r0
  end

  module EndOfMonth0
  end

  module EndOfMonth1
    def end_of
      elements[0]
    end

    def month
      elements[1]
    end

    def year
      elements[3]
    end
  end

  def _nt_end_of_month
    start_index = index
    if node_cache[:end_of_month].has_key?(index)
      cached = node_cache[:end_of_month][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_end_of
    s0 << r1
    if r1
      r2 = _nt_month
      s0 << r2
      if r2
        i3 = index
        i4, s4 = index, []
        r6 = _nt_space
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          if has_terminal?(',', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(',')
            r7 = nil
          end
          s4 << r7
          if r7
            r9 = _nt_space
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r8
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(EndOfMonth0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          r10 = _nt_space
          if r10
            r3 = r10
          else
            @index = i3
            r3 = nil
          end
        end
        s0 << r3
        if r3
          r11 = _nt_year
          s0 << r11
        end
      end
    end
    if s0.last
      r0 = instantiate_node(EndOfMonth,input, i0...index, s0)
      r0.extend(EndOfMonth1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:end_of_month][start_index] = r0

    r0
  end

  module BeginningOfYear0
    def beginning_of
      elements[0]
    end

    def year
      elements[1]
    end
  end

  def _nt_beginning_of_year
    start_index = index
    if node_cache[:beginning_of_year].has_key?(index)
      cached = node_cache[:beginning_of_year][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_beginning_of
    s0 << r1
    if r1
      r2 = _nt_year
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(BeginningOfYear,input, i0...index, s0)
      r0.extend(BeginningOfYear0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:beginning_of_year][start_index] = r0

    r0
  end

  module MiddleOfYear0
    def middle_of
      elements[0]
    end

    def year
      elements[1]
    end
  end

  def _nt_middle_of_year
    start_index = index
    if node_cache[:middle_of_year].has_key?(index)
      cached = node_cache[:middle_of_year][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_middle_of
    s0 << r1
    if r1
      r2 = _nt_year
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(MiddleOfYear,input, i0...index, s0)
      r0.extend(MiddleOfYear0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:middle_of_year][start_index] = r0

    r0
  end

  module EndOfYear0
    def end_of
      elements[0]
    end

    def year
      elements[1]
    end
  end

  def _nt_end_of_year
    start_index = index
    if node_cache[:end_of_year].has_key?(index)
      cached = node_cache[:end_of_year][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_end_of
    s0 << r1
    if r1
      r2 = _nt_year
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(EndOfYear,input, i0...index, s0)
      r0.extend(EndOfYear0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:end_of_year][start_index] = r0

    r0
  end

  module DayMonthYearToDayMonthYear0
    def space
      elements[1]
    end
  end

  module DayMonthYearToDayMonthYear1
    def start
      elements[1]
    end

    def space1
      elements[2]
    end

    def space2
      elements[4]
    end

    def stop
      elements[5]
    end
  end

  module DayMonthYearToDayMonthYear2
    def start
      elements[0]
    end

    def stop
      elements[4]
    end
  end

  def _nt_day_month_year_to_day_month_year
    start_index = index
    if node_cache[:day_month_year_to_day_month_year].has_key?(index)
      cached = node_cache[:day_month_year_to_day_month_year][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    i3, s3 = index, []
    if has_terminal?('from', false, index)
      r4 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('from')
      r4 = nil
    end
    s3 << r4
    if r4
      r5 = _nt_space
      s3 << r5
    end
    if s3.last
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      r3.extend(DayMonthYearToDayMonthYear0)
    else
      @index = i3
      r3 = nil
    end
    if r3
      r2 = r3
    else
      r2 = instantiate_node(SyntaxNode,input, index...index)
    end
    s1 << r2
    if r2
      r6 = _nt_day_month_year
      s1 << r6
      if r6
        r7 = _nt_space
        s1 << r7
        if r7
          if has_terminal?('to', false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('to')
            r8 = nil
          end
          s1 << r8
          if r8
            r9 = _nt_space
            s1 << r9
            if r9
              r10 = _nt_day_month_year
              s1 << r10
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(DayMonthYearToDayMonthYear,input, i1...index, s1)
      r1.extend(DayMonthYearToDayMonthYear1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i11, s11 = index, []
      r12 = _nt_day_month_year
      s11 << r12
      if r12
        r14 = _nt_space
        if r14
          r13 = r14
        else
          r13 = instantiate_node(SyntaxNode,input, index...index)
        end
        s11 << r13
        if r13
          if has_terminal?('-', false, index)
            r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('-')
            r15 = nil
          end
          s11 << r15
          if r15
            r17 = _nt_space
            if r17
              r16 = r17
            else
              r16 = instantiate_node(SyntaxNode,input, index...index)
            end
            s11 << r16
            if r16
              r18 = _nt_day_month_year
              s11 << r18
            end
          end
        end
      end
      if s11.last
        r11 = instantiate_node(DayMonthYearToDayMonthYear,input, i11...index, s11)
        r11.extend(DayMonthYearToDayMonthYear2)
      else
        @index = i11
        r11 = nil
      end
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:day_month_year_to_day_month_year][start_index] = r0

    r0
  end

  module DayMonthToDayMonthYear0
    def space
      elements[1]
    end
  end

  module DayMonthToDayMonthYear1
    def start_month
      elements[1]
    end

    def start_day
      elements[3]
    end

    def space1
      elements[4]
    end

    def space2
      elements[6]
    end

    def stop
      elements[7]
    end
  end

  module DayMonthToDayMonthYear2
    def space
      elements[1]
    end
  end

  module DayMonthToDayMonthYear3
    def space
      elements[1]
    end
  end

  module DayMonthToDayMonthYear4
    def start_day
      elements[1]
    end

    def space1
      elements[2]
    end

    def start_month
      elements[4]
    end

    def space2
      elements[5]
    end

    def space3
      elements[7]
    end

    def stop
      elements[8]
    end
  end

  module DayMonthToDayMonthYear5
    def space
      elements[1]
    end
  end

  module DayMonthToDayMonthYear6
    def space
      elements[1]
    end
  end

  module DayMonthToDayMonthYear7
    def start_month
      elements[1]
    end

    def space1
      elements[2]
    end

    def start_day
      elements[4]
    end

    def space2
      elements[5]
    end

    def space3
      elements[7]
    end

    def stop
      elements[8]
    end
  end

  module DayMonthToDayMonthYear8
    def start_month
      elements[0]
    end

    def start_day
      elements[2]
    end

    def stop
      elements[6]
    end
  end

  module DayMonthToDayMonthYear9
    def space
      elements[1]
    end
  end

  module DayMonthToDayMonthYear10
    def start_day
      elements[0]
    end

    def space
      elements[1]
    end

    def start_month
      elements[3]
    end

    def stop
      elements[7]
    end
  end

  module DayMonthToDayMonthYear11
    def space
      elements[1]
    end
  end

  module DayMonthToDayMonthYear12
    def start_month
      elements[0]
    end

    def space
      elements[1]
    end

    def start_day
      elements[3]
    end

    def stop
      elements[7]
    end
  end

  def _nt_day_month_to_day_month_year
    start_index = index
    if node_cache[:day_month_to_day_month_year].has_key?(index)
      cached = node_cache[:day_month_to_day_month_year][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    i3, s3 = index, []
    if has_terminal?('from', false, index)
      r4 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('from')
      r4 = nil
    end
    s3 << r4
    if r4
      r5 = _nt_space
      s3 << r5
    end
    if s3.last
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      r3.extend(DayMonthToDayMonthYear0)
    else
      @index = i3
      r3 = nil
    end
    if r3
      r2 = r3
    else
      r2 = instantiate_node(SyntaxNode,input, index...index)
    end
    s1 << r2
    if r2
      r6 = _nt_month_number
      s1 << r6
      if r6
        if has_terminal?('/', false, index)
          r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('/')
          r7 = nil
        end
        s1 << r7
        if r7
          r8 = _nt_day_number
          s1 << r8
          if r8
            r9 = _nt_space
            s1 << r9
            if r9
              if has_terminal?('to', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure('to')
                r10 = nil
              end
              s1 << r10
              if r10
                r11 = _nt_space
                s1 << r11
                if r11
                  r12 = _nt_day_month_year
                  s1 << r12
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(DayMonthToDayMonthYear,input, i1...index, s1)
      r1.extend(DayMonthToDayMonthYear1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i13, s13 = index, []
      i15, s15 = index, []
      if has_terminal?('from', false, index)
        r16 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('from')
        r16 = nil
      end
      s15 << r16
      if r16
        r17 = _nt_space
        s15 << r17
      end
      if s15.last
        r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
        r15.extend(DayMonthToDayMonthYear2)
      else
        @index = i15
        r15 = nil
      end
      if r15
        r14 = r15
      else
        r14 = instantiate_node(SyntaxNode,input, index...index)
      end
      s13 << r14
      if r14
        r18 = _nt_day
        s13 << r18
        if r18
          r19 = _nt_space
          s13 << r19
          if r19
            i21, s21 = index, []
            if has_terminal?('of', false, index)
              r22 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('of')
              r22 = nil
            end
            s21 << r22
            if r22
              r23 = _nt_space
              s21 << r23
            end
            if s21.last
              r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
              r21.extend(DayMonthToDayMonthYear3)
            else
              @index = i21
              r21 = nil
            end
            if r21
              r20 = r21
            else
              r20 = instantiate_node(SyntaxNode,input, index...index)
            end
            s13 << r20
            if r20
              r24 = _nt_month_name
              s13 << r24
              if r24
                r25 = _nt_space
                s13 << r25
                if r25
                  if has_terminal?('to', false, index)
                    r26 = instantiate_node(SyntaxNode,input, index...(index + 2))
                    @index += 2
                  else
                    terminal_parse_failure('to')
                    r26 = nil
                  end
                  s13 << r26
                  if r26
                    r27 = _nt_space
                    s13 << r27
                    if r27
                      r28 = _nt_day_month_year
                      s13 << r28
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s13.last
        r13 = instantiate_node(DayMonthToDayMonthYear,input, i13...index, s13)
        r13.extend(DayMonthToDayMonthYear4)
      else
        @index = i13
        r13 = nil
      end
      if r13
        r0 = r13
      else
        i29, s29 = index, []
        i31, s31 = index, []
        if has_terminal?('from', false, index)
          r32 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure('from')
          r32 = nil
        end
        s31 << r32
        if r32
          r33 = _nt_space
          s31 << r33
        end
        if s31.last
          r31 = instantiate_node(SyntaxNode,input, i31...index, s31)
          r31.extend(DayMonthToDayMonthYear5)
        else
          @index = i31
          r31 = nil
        end
        if r31
          r30 = r31
        else
          r30 = instantiate_node(SyntaxNode,input, index...index)
        end
        s29 << r30
        if r30
          r34 = _nt_month_name
          s29 << r34
          if r34
            r35 = _nt_space
            s29 << r35
            if r35
              i37, s37 = index, []
              if has_terminal?('the', false, index)
                r38 = instantiate_node(SyntaxNode,input, index...(index + 3))
                @index += 3
              else
                terminal_parse_failure('the')
                r38 = nil
              end
              s37 << r38
              if r38
                r39 = _nt_space
                s37 << r39
              end
              if s37.last
                r37 = instantiate_node(SyntaxNode,input, i37...index, s37)
                r37.extend(DayMonthToDayMonthYear6)
              else
                @index = i37
                r37 = nil
              end
              if r37
                r36 = r37
              else
                r36 = instantiate_node(SyntaxNode,input, index...index)
              end
              s29 << r36
              if r36
                r40 = _nt_day
                s29 << r40
                if r40
                  r41 = _nt_space
                  s29 << r41
                  if r41
                    if has_terminal?('to', false, index)
                      r42 = instantiate_node(SyntaxNode,input, index...(index + 2))
                      @index += 2
                    else
                      terminal_parse_failure('to')
                      r42 = nil
                    end
                    s29 << r42
                    if r42
                      r43 = _nt_space
                      s29 << r43
                      if r43
                        r44 = _nt_day_month_year
                        s29 << r44
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s29.last
          r29 = instantiate_node(DayMonthToDayMonthYear,input, i29...index, s29)
          r29.extend(DayMonthToDayMonthYear7)
        else
          @index = i29
          r29 = nil
        end
        if r29
          r0 = r29
        else
          i45, s45 = index, []
          r46 = _nt_month_number
          s45 << r46
          if r46
            if has_terminal?('/', false, index)
              r47 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('/')
              r47 = nil
            end
            s45 << r47
            if r47
              r48 = _nt_day_number
              s45 << r48
              if r48
                r50 = _nt_space
                if r50
                  r49 = r50
                else
                  r49 = instantiate_node(SyntaxNode,input, index...index)
                end
                s45 << r49
                if r49
                  if has_terminal?('-', false, index)
                    r51 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('-')
                    r51 = nil
                  end
                  s45 << r51
                  if r51
                    r53 = _nt_space
                    if r53
                      r52 = r53
                    else
                      r52 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s45 << r52
                    if r52
                      r54 = _nt_day_month_year
                      s45 << r54
                    end
                  end
                end
              end
            end
          end
          if s45.last
            r45 = instantiate_node(DayMonthToDayMonthYear,input, i45...index, s45)
            r45.extend(DayMonthToDayMonthYear8)
          else
            @index = i45
            r45 = nil
          end
          if r45
            r0 = r45
          else
            i55, s55 = index, []
            r56 = _nt_day
            s55 << r56
            if r56
              r57 = _nt_space
              s55 << r57
              if r57
                i59, s59 = index, []
                if has_terminal?('of', false, index)
                  r60 = instantiate_node(SyntaxNode,input, index...(index + 2))
                  @index += 2
                else
                  terminal_parse_failure('of')
                  r60 = nil
                end
                s59 << r60
                if r60
                  r61 = _nt_space
                  s59 << r61
                end
                if s59.last
                  r59 = instantiate_node(SyntaxNode,input, i59...index, s59)
                  r59.extend(DayMonthToDayMonthYear9)
                else
                  @index = i59
                  r59 = nil
                end
                if r59
                  r58 = r59
                else
                  r58 = instantiate_node(SyntaxNode,input, index...index)
                end
                s55 << r58
                if r58
                  r62 = _nt_month_name
                  s55 << r62
                  if r62
                    r64 = _nt_space
                    if r64
                      r63 = r64
                    else
                      r63 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s55 << r63
                    if r63
                      if has_terminal?('-', false, index)
                        r65 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure('-')
                        r65 = nil
                      end
                      s55 << r65
                      if r65
                        r67 = _nt_space
                        if r67
                          r66 = r67
                        else
                          r66 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s55 << r66
                        if r66
                          r68 = _nt_day_month_year
                          s55 << r68
                        end
                      end
                    end
                  end
                end
              end
            end
            if s55.last
              r55 = instantiate_node(DayMonthToDayMonthYear,input, i55...index, s55)
              r55.extend(DayMonthToDayMonthYear10)
            else
              @index = i55
              r55 = nil
            end
            if r55
              r0 = r55
            else
              i69, s69 = index, []
              r70 = _nt_month_name
              s69 << r70
              if r70
                r71 = _nt_space
                s69 << r71
                if r71
                  i73, s73 = index, []
                  if has_terminal?('the', false, index)
                    r74 = instantiate_node(SyntaxNode,input, index...(index + 3))
                    @index += 3
                  else
                    terminal_parse_failure('the')
                    r74 = nil
                  end
                  s73 << r74
                  if r74
                    r75 = _nt_space
                    s73 << r75
                  end
                  if s73.last
                    r73 = instantiate_node(SyntaxNode,input, i73...index, s73)
                    r73.extend(DayMonthToDayMonthYear11)
                  else
                    @index = i73
                    r73 = nil
                  end
                  if r73
                    r72 = r73
                  else
                    r72 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s69 << r72
                  if r72
                    r76 = _nt_day
                    s69 << r76
                    if r76
                      r78 = _nt_space
                      if r78
                        r77 = r78
                      else
                        r77 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s69 << r77
                      if r77
                        if has_terminal?('-', false, index)
                          r79 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure('-')
                          r79 = nil
                        end
                        s69 << r79
                        if r79
                          r81 = _nt_space
                          if r81
                            r80 = r81
                          else
                            r80 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s69 << r80
                          if r80
                            r82 = _nt_day_month_year
                            s69 << r82
                          end
                        end
                      end
                    end
                  end
                end
              end
              if s69.last
                r69 = instantiate_node(DayMonthToDayMonthYear,input, i69...index, s69)
                r69.extend(DayMonthToDayMonthYear12)
              else
                @index = i69
                r69 = nil
              end
              if r69
                r0 = r69
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end
    end

    node_cache[:day_month_to_day_month_year][start_index] = r0

    r0
  end

  module MonthYearToMonthYear0
    def space
      elements[1]
    end
  end

  module MonthYearToMonthYear1
    def start
      elements[1]
    end

    def space1
      elements[2]
    end

    def space2
      elements[4]
    end

    def stop
      elements[5]
    end
  end

  module MonthYearToMonthYear2
    def start
      elements[0]
    end

    def stop
      elements[4]
    end
  end

  def _nt_month_year_to_month_year
    start_index = index
    if node_cache[:month_year_to_month_year].has_key?(index)
      cached = node_cache[:month_year_to_month_year][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    i3, s3 = index, []
    if has_terminal?('from', false, index)
      r4 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('from')
      r4 = nil
    end
    s3 << r4
    if r4
      r5 = _nt_space
      s3 << r5
    end
    if s3.last
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      r3.extend(MonthYearToMonthYear0)
    else
      @index = i3
      r3 = nil
    end
    if r3
      r2 = r3
    else
      r2 = instantiate_node(SyntaxNode,input, index...index)
    end
    s1 << r2
    if r2
      r6 = _nt_month_year
      s1 << r6
      if r6
        r7 = _nt_space
        s1 << r7
        if r7
          if has_terminal?('to', false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('to')
            r8 = nil
          end
          s1 << r8
          if r8
            r9 = _nt_space
            s1 << r9
            if r9
              r10 = _nt_month_year
              s1 << r10
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(MonthYearToMonthYear,input, i1...index, s1)
      r1.extend(MonthYearToMonthYear1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i11, s11 = index, []
      r12 = _nt_month_year
      s11 << r12
      if r12
        r14 = _nt_space
        if r14
          r13 = r14
        else
          r13 = instantiate_node(SyntaxNode,input, index...index)
        end
        s11 << r13
        if r13
          if has_terminal?('-', false, index)
            r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('-')
            r15 = nil
          end
          s11 << r15
          if r15
            r17 = _nt_space
            if r17
              r16 = r17
            else
              r16 = instantiate_node(SyntaxNode,input, index...index)
            end
            s11 << r16
            if r16
              r18 = _nt_month_year
              s11 << r18
            end
          end
        end
      end
      if s11.last
        r11 = instantiate_node(MonthYearToMonthYear,input, i11...index, s11)
        r11.extend(MonthYearToMonthYear2)
      else
        @index = i11
        r11 = nil
      end
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:month_year_to_month_year][start_index] = r0

    r0
  end

  module MonthToMonthYear0
    def from
      elements[0]
    end

    def start
      elements[1]
    end

    def to
      elements[2]
    end

    def stop
      elements[3]
    end

    def of
      elements[4]
    end

    def year
      elements[5]
    end
  end

  def _nt_month_to_month_year
    start_index = index
    if node_cache[:month_to_month_year].has_key?(index)
      cached = node_cache[:month_to_month_year][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_from
    s0 << r1
    if r1
      r2 = _nt_month
      s0 << r2
      if r2
        r3 = _nt_to
        s0 << r3
        if r3
          r4 = _nt_month
          s0 << r4
          if r4
            r5 = _nt_of
            s0 << r5
            if r5
              r6 = _nt_year
              s0 << r6
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(MonthToMonthYear,input, i0...index, s0)
      r0.extend(MonthToMonthYear0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:month_to_month_year][start_index] = r0

    r0
  end

  module DayToDayMonthYear0
    def month
      elements[0]
    end

    def start
      elements[2]
    end

    def stop
      elements[4]
    end

    def year
      elements[6]
    end
  end

  module DayToDayMonthYear1
    def month
      elements[0]
    end

    def start
      elements[2]
    end

    def stop
      elements[4]
    end

    def year
      elements[6]
    end
  end

  module DayToDayMonthYear2
    def space
      elements[1]
    end
  end

  module DayToDayMonthYear3
    def space
      elements[1]
    end
  end

  module DayToDayMonthYear4
    def start
      elements[1]
    end

    def space1
      elements[2]
    end

    def space2
      elements[4]
    end

    def stop
      elements[5]
    end

    def space3
      elements[6]
    end

    def month
      elements[8]
    end

    def space4
      elements[9]
    end

    def year
      elements[10]
    end
  end

  module DayToDayMonthYear5
    def space
      elements[1]
    end
  end

  module DayToDayMonthYear6
    def space
      elements[1]
    end
  end

  module DayToDayMonthYear7
    def space
      elements[1]
    end
  end

  module DayToDayMonthYear8
    def month
      elements[1]
    end

    def space1
      elements[2]
    end

    def start
      elements[4]
    end

    def space2
      elements[5]
    end

    def space3
      elements[7]
    end

    def stop
      elements[9]
    end

    def year
      elements[13]
    end
  end

  module DayToDayMonthYear9
    def space
      elements[1]
    end
  end

  module DayToDayMonthYear10
    def space
      elements[1]
    end
  end

  module DayToDayMonthYear11
    def start
      elements[1]
    end

    def space1
      elements[2]
    end

    def space2
      elements[4]
    end

    def stop
      elements[5]
    end

    def space3
      elements[6]
    end

    def month
      elements[8]
    end

    def space4
      elements[9]
    end

    def year
      elements[10]
    end
  end

  module DayToDayMonthYear12
    def space
      elements[1]
    end
  end

  module DayToDayMonthYear13
    def space
      elements[1]
    end
  end

  module DayToDayMonthYear14
    def month
      elements[0]
    end

    def space1
      elements[1]
    end

    def start
      elements[3]
    end

    def space2
      elements[4]
    end

    def space3
      elements[6]
    end

    def stop
      elements[8]
    end

    def year
      elements[12]
    end
  end

  module DayToDayMonthYear15
    def space
      elements[1]
    end
  end

  module DayToDayMonthYear16
    def start
      elements[0]
    end

    def stop
      elements[4]
    end

    def space1
      elements[5]
    end

    def month
      elements[7]
    end

    def space2
      elements[8]
    end

    def year
      elements[9]
    end
  end

  module DayToDayMonthYear17
    def space
      elements[1]
    end
  end

  module DayToDayMonthYear18
    def month
      elements[0]
    end

    def space
      elements[1]
    end

    def start
      elements[3]
    end

    def stop
      elements[7]
    end

    def year
      elements[11]
    end
  end

  def _nt_day_to_day_month_year
    start_index = index
    if node_cache[:day_to_day_month_year].has_key?(index)
      cached = node_cache[:day_to_day_month_year][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_month_number
    s1 << r2
    if r2
      if has_terminal?('/', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('/')
        r3 = nil
      end
      s1 << r3
      if r3
        r4 = _nt_day_number
        s1 << r4
        if r4
          if has_terminal?('-', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('-')
            r5 = nil
          end
          s1 << r5
          if r5
            r6 = _nt_day_number
            s1 << r6
            if r6
              if has_terminal?('/', false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('/')
                r7 = nil
              end
              s1 << r7
              if r7
                r8 = _nt_year
                s1 << r8
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(DayToDayMonthYear,input, i1...index, s1)
      r1.extend(DayToDayMonthYear0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i9, s9 = index, []
      r10 = _nt_month_number
      s9 << r10
      if r10
        if has_terminal?('.', false, index)
          r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('.')
          r11 = nil
        end
        s9 << r11
        if r11
          r12 = _nt_day_number
          s9 << r12
          if r12
            if has_terminal?('-', false, index)
              r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('-')
              r13 = nil
            end
            s9 << r13
            if r13
              r14 = _nt_day_number
              s9 << r14
              if r14
                if has_terminal?('.', false, index)
                  r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('.')
                  r15 = nil
                end
                s9 << r15
                if r15
                  r16 = _nt_year
                  s9 << r16
                end
              end
            end
          end
        end
      end
      if s9.last
        r9 = instantiate_node(DayToDayMonthYear,input, i9...index, s9)
        r9.extend(DayToDayMonthYear1)
      else
        @index = i9
        r9 = nil
      end
      if r9
        r0 = r9
      else
        i17, s17 = index, []
        i19, s19 = index, []
        if has_terminal?('from', false, index)
          r20 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure('from')
          r20 = nil
        end
        s19 << r20
        if r20
          r21 = _nt_space
          s19 << r21
        end
        if s19.last
          r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
          r19.extend(DayToDayMonthYear2)
        else
          @index = i19
          r19 = nil
        end
        if r19
          r18 = r19
        else
          r18 = instantiate_node(SyntaxNode,input, index...index)
        end
        s17 << r18
        if r18
          r22 = _nt_day
          s17 << r22
          if r22
            r23 = _nt_space
            s17 << r23
            if r23
              if has_terminal?('to', false, index)
                r24 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure('to')
                r24 = nil
              end
              s17 << r24
              if r24
                r25 = _nt_space
                s17 << r25
                if r25
                  r26 = _nt_day
                  s17 << r26
                  if r26
                    r27 = _nt_space
                    s17 << r27
                    if r27
                      i29, s29 = index, []
                      if has_terminal?('of', false, index)
                        r30 = instantiate_node(SyntaxNode,input, index...(index + 2))
                        @index += 2
                      else
                        terminal_parse_failure('of')
                        r30 = nil
                      end
                      s29 << r30
                      if r30
                        r31 = _nt_space
                        s29 << r31
                      end
                      if s29.last
                        r29 = instantiate_node(SyntaxNode,input, i29...index, s29)
                        r29.extend(DayToDayMonthYear3)
                      else
                        @index = i29
                        r29 = nil
                      end
                      if r29
                        r28 = r29
                      else
                        r28 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s17 << r28
                      if r28
                        r32 = _nt_month_name
                        s17 << r32
                        if r32
                          r33 = _nt_space
                          s17 << r33
                          if r33
                            r34 = _nt_year
                            s17 << r34
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s17.last
          r17 = instantiate_node(DayToDayMonthYear,input, i17...index, s17)
          r17.extend(DayToDayMonthYear4)
        else
          @index = i17
          r17 = nil
        end
        if r17
          r0 = r17
        else
          i35, s35 = index, []
          i37, s37 = index, []
          if has_terminal?('from', false, index)
            r38 = instantiate_node(SyntaxNode,input, index...(index + 4))
            @index += 4
          else
            terminal_parse_failure('from')
            r38 = nil
          end
          s37 << r38
          if r38
            r39 = _nt_space
            s37 << r39
          end
          if s37.last
            r37 = instantiate_node(SyntaxNode,input, i37...index, s37)
            r37.extend(DayToDayMonthYear5)
          else
            @index = i37
            r37 = nil
          end
          if r37
            r36 = r37
          else
            r36 = instantiate_node(SyntaxNode,input, index...index)
          end
          s35 << r36
          if r36
            r40 = _nt_month_name
            s35 << r40
            if r40
              r41 = _nt_space
              s35 << r41
              if r41
                i43, s43 = index, []
                if has_terminal?('the', false, index)
                  r44 = instantiate_node(SyntaxNode,input, index...(index + 3))
                  @index += 3
                else
                  terminal_parse_failure('the')
                  r44 = nil
                end
                s43 << r44
                if r44
                  r45 = _nt_space
                  s43 << r45
                end
                if s43.last
                  r43 = instantiate_node(SyntaxNode,input, i43...index, s43)
                  r43.extend(DayToDayMonthYear6)
                else
                  @index = i43
                  r43 = nil
                end
                if r43
                  r42 = r43
                else
                  r42 = instantiate_node(SyntaxNode,input, index...index)
                end
                s35 << r42
                if r42
                  r46 = _nt_day
                  s35 << r46
                  if r46
                    r47 = _nt_space
                    s35 << r47
                    if r47
                      if has_terminal?('to', false, index)
                        r48 = instantiate_node(SyntaxNode,input, index...(index + 2))
                        @index += 2
                      else
                        terminal_parse_failure('to')
                        r48 = nil
                      end
                      s35 << r48
                      if r48
                        r49 = _nt_space
                        s35 << r49
                        if r49
                          i51, s51 = index, []
                          if has_terminal?('the', false, index)
                            r52 = instantiate_node(SyntaxNode,input, index...(index + 3))
                            @index += 3
                          else
                            terminal_parse_failure('the')
                            r52 = nil
                          end
                          s51 << r52
                          if r52
                            r53 = _nt_space
                            s51 << r53
                          end
                          if s51.last
                            r51 = instantiate_node(SyntaxNode,input, i51...index, s51)
                            r51.extend(DayToDayMonthYear7)
                          else
                            @index = i51
                            r51 = nil
                          end
                          if r51
                            r50 = r51
                          else
                            r50 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s35 << r50
                          if r50
                            r54 = _nt_day
                            s35 << r54
                            if r54
                              r56 = _nt_space
                              if r56
                                r55 = r56
                              else
                                r55 = instantiate_node(SyntaxNode,input, index...index)
                              end
                              s35 << r55
                              if r55
                                if has_terminal?(',', false, index)
                                  r57 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                  @index += 1
                                else
                                  terminal_parse_failure(',')
                                  r57 = nil
                                end
                                s35 << r57
                                if r57
                                  r59 = _nt_space
                                  if r59
                                    r58 = r59
                                  else
                                    r58 = instantiate_node(SyntaxNode,input, index...index)
                                  end
                                  s35 << r58
                                  if r58
                                    r60 = _nt_year
                                    s35 << r60
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
          if s35.last
            r35 = instantiate_node(DayToDayMonthYear,input, i35...index, s35)
            r35.extend(DayToDayMonthYear8)
          else
            @index = i35
            r35 = nil
          end
          if r35
            r0 = r35
          else
            i61, s61 = index, []
            i63, s63 = index, []
            if has_terminal?('the', false, index)
              r64 = instantiate_node(SyntaxNode,input, index...(index + 3))
              @index += 3
            else
              terminal_parse_failure('the')
              r64 = nil
            end
            s63 << r64
            if r64
              r65 = _nt_space
              s63 << r65
            end
            if s63.last
              r63 = instantiate_node(SyntaxNode,input, i63...index, s63)
              r63.extend(DayToDayMonthYear9)
            else
              @index = i63
              r63 = nil
            end
            if r63
              r62 = r63
            else
              r62 = instantiate_node(SyntaxNode,input, index...index)
            end
            s61 << r62
            if r62
              r66 = _nt_day
              s61 << r66
              if r66
                r67 = _nt_space
                s61 << r67
                if r67
                  if has_terminal?('and', false, index)
                    r68 = instantiate_node(SyntaxNode,input, index...(index + 3))
                    @index += 3
                  else
                    terminal_parse_failure('and')
                    r68 = nil
                  end
                  s61 << r68
                  if r68
                    r69 = _nt_space
                    s61 << r69
                    if r69
                      r70 = _nt_day
                      s61 << r70
                      if r70
                        r71 = _nt_space
                        s61 << r71
                        if r71
                          i73, s73 = index, []
                          if has_terminal?('of', false, index)
                            r74 = instantiate_node(SyntaxNode,input, index...(index + 2))
                            @index += 2
                          else
                            terminal_parse_failure('of')
                            r74 = nil
                          end
                          s73 << r74
                          if r74
                            r75 = _nt_space
                            s73 << r75
                          end
                          if s73.last
                            r73 = instantiate_node(SyntaxNode,input, i73...index, s73)
                            r73.extend(DayToDayMonthYear10)
                          else
                            @index = i73
                            r73 = nil
                          end
                          if r73
                            r72 = r73
                          else
                            r72 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s61 << r72
                          if r72
                            r76 = _nt_month_name
                            s61 << r76
                            if r76
                              r77 = _nt_space
                              s61 << r77
                              if r77
                                r78 = _nt_year
                                s61 << r78
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
            if s61.last
              r61 = instantiate_node(DayToDayMonthYear,input, i61...index, s61)
              r61.extend(DayToDayMonthYear11)
            else
              @index = i61
              r61 = nil
            end
            if r61
              r0 = r61
            else
              i79, s79 = index, []
              r80 = _nt_month_name
              s79 << r80
              if r80
                r81 = _nt_space
                s79 << r81
                if r81
                  i83, s83 = index, []
                  if has_terminal?('the', false, index)
                    r84 = instantiate_node(SyntaxNode,input, index...(index + 3))
                    @index += 3
                  else
                    terminal_parse_failure('the')
                    r84 = nil
                  end
                  s83 << r84
                  if r84
                    r85 = _nt_space
                    s83 << r85
                  end
                  if s83.last
                    r83 = instantiate_node(SyntaxNode,input, i83...index, s83)
                    r83.extend(DayToDayMonthYear12)
                  else
                    @index = i83
                    r83 = nil
                  end
                  if r83
                    r82 = r83
                  else
                    r82 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s79 << r82
                  if r82
                    r86 = _nt_day
                    s79 << r86
                    if r86
                      r87 = _nt_space
                      s79 << r87
                      if r87
                        if has_terminal?('and', false, index)
                          r88 = instantiate_node(SyntaxNode,input, index...(index + 3))
                          @index += 3
                        else
                          terminal_parse_failure('and')
                          r88 = nil
                        end
                        s79 << r88
                        if r88
                          r89 = _nt_space
                          s79 << r89
                          if r89
                            i91, s91 = index, []
                            if has_terminal?('the', false, index)
                              r92 = instantiate_node(SyntaxNode,input, index...(index + 3))
                              @index += 3
                            else
                              terminal_parse_failure('the')
                              r92 = nil
                            end
                            s91 << r92
                            if r92
                              r93 = _nt_space
                              s91 << r93
                            end
                            if s91.last
                              r91 = instantiate_node(SyntaxNode,input, i91...index, s91)
                              r91.extend(DayToDayMonthYear13)
                            else
                              @index = i91
                              r91 = nil
                            end
                            if r91
                              r90 = r91
                            else
                              r90 = instantiate_node(SyntaxNode,input, index...index)
                            end
                            s79 << r90
                            if r90
                              r94 = _nt_day
                              s79 << r94
                              if r94
                                r96 = _nt_space
                                if r96
                                  r95 = r96
                                else
                                  r95 = instantiate_node(SyntaxNode,input, index...index)
                                end
                                s79 << r95
                                if r95
                                  if has_terminal?(',', false, index)
                                    r97 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                    @index += 1
                                  else
                                    terminal_parse_failure(',')
                                    r97 = nil
                                  end
                                  s79 << r97
                                  if r97
                                    r99 = _nt_space
                                    if r99
                                      r98 = r99
                                    else
                                      r98 = instantiate_node(SyntaxNode,input, index...index)
                                    end
                                    s79 << r98
                                    if r98
                                      r100 = _nt_year
                                      s79 << r100
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
              if s79.last
                r79 = instantiate_node(DayToDayMonthYear,input, i79...index, s79)
                r79.extend(DayToDayMonthYear14)
              else
                @index = i79
                r79 = nil
              end
              if r79
                r0 = r79
              else
                i101, s101 = index, []
                r102 = _nt_day
                s101 << r102
                if r102
                  r104 = _nt_space
                  if r104
                    r103 = r104
                  else
                    r103 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s101 << r103
                  if r103
                    if has_terminal?('-', false, index)
                      r105 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure('-')
                      r105 = nil
                    end
                    s101 << r105
                    if r105
                      r107 = _nt_space
                      if r107
                        r106 = r107
                      else
                        r106 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s101 << r106
                      if r106
                        r108 = _nt_day
                        s101 << r108
                        if r108
                          r109 = _nt_space
                          s101 << r109
                          if r109
                            i111, s111 = index, []
                            if has_terminal?('of', false, index)
                              r112 = instantiate_node(SyntaxNode,input, index...(index + 2))
                              @index += 2
                            else
                              terminal_parse_failure('of')
                              r112 = nil
                            end
                            s111 << r112
                            if r112
                              r113 = _nt_space
                              s111 << r113
                            end
                            if s111.last
                              r111 = instantiate_node(SyntaxNode,input, i111...index, s111)
                              r111.extend(DayToDayMonthYear15)
                            else
                              @index = i111
                              r111 = nil
                            end
                            if r111
                              r110 = r111
                            else
                              r110 = instantiate_node(SyntaxNode,input, index...index)
                            end
                            s101 << r110
                            if r110
                              r114 = _nt_month_name
                              s101 << r114
                              if r114
                                r115 = _nt_space
                                s101 << r115
                                if r115
                                  r116 = _nt_year
                                  s101 << r116
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
                if s101.last
                  r101 = instantiate_node(DayToDayMonthYear,input, i101...index, s101)
                  r101.extend(DayToDayMonthYear16)
                else
                  @index = i101
                  r101 = nil
                end
                if r101
                  r0 = r101
                else
                  i117, s117 = index, []
                  r118 = _nt_month_name
                  s117 << r118
                  if r118
                    r119 = _nt_space
                    s117 << r119
                    if r119
                      i121, s121 = index, []
                      if has_terminal?('the', false, index)
                        r122 = instantiate_node(SyntaxNode,input, index...(index + 3))
                        @index += 3
                      else
                        terminal_parse_failure('the')
                        r122 = nil
                      end
                      s121 << r122
                      if r122
                        r123 = _nt_space
                        s121 << r123
                      end
                      if s121.last
                        r121 = instantiate_node(SyntaxNode,input, i121...index, s121)
                        r121.extend(DayToDayMonthYear17)
                      else
                        @index = i121
                        r121 = nil
                      end
                      if r121
                        r120 = r121
                      else
                        r120 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s117 << r120
                      if r120
                        r124 = _nt_day
                        s117 << r124
                        if r124
                          r126 = _nt_space
                          if r126
                            r125 = r126
                          else
                            r125 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s117 << r125
                          if r125
                            if has_terminal?('-', false, index)
                              r127 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure('-')
                              r127 = nil
                            end
                            s117 << r127
                            if r127
                              r129 = _nt_space
                              if r129
                                r128 = r129
                              else
                                r128 = instantiate_node(SyntaxNode,input, index...index)
                              end
                              s117 << r128
                              if r128
                                r130 = _nt_day
                                s117 << r130
                                if r130
                                  r132 = _nt_space
                                  if r132
                                    r131 = r132
                                  else
                                    r131 = instantiate_node(SyntaxNode,input, index...index)
                                  end
                                  s117 << r131
                                  if r131
                                    if has_terminal?(',', false, index)
                                      r133 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                      @index += 1
                                    else
                                      terminal_parse_failure(',')
                                      r133 = nil
                                    end
                                    s117 << r133
                                    if r133
                                      r135 = _nt_space
                                      if r135
                                        r134 = r135
                                      else
                                        r134 = instantiate_node(SyntaxNode,input, index...index)
                                      end
                                      s117 << r134
                                      if r134
                                        r136 = _nt_year
                                        s117 << r136
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                  if s117.last
                    r117 = instantiate_node(DayToDayMonthYear,input, i117...index, s117)
                    r117.extend(DayToDayMonthYear18)
                  else
                    @index = i117
                    r117 = nil
                  end
                  if r117
                    r0 = r117
                  else
                    @index = i0
                    r0 = nil
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:day_to_day_month_year][start_index] = r0

    r0
  end

  module HolidayYear0
    def holiday
      elements[0]
    end

    def space
      elements[2]
    end

    def year
      elements[3]
    end
  end

  def _nt_holiday_year
    start_index = index
    if node_cache[:holiday_year].has_key?(index)
      cached = node_cache[:holiday_year][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_holiday
    s0 << r1
    if r1
      i2 = index
      r3 = lambda { |seq| Holiday.date_defined_for?(seq[0].text_value) }.call(s0)
      if r3
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      else
        r2 = nil
      end
      s0 << r2
      if r2
        r4 = _nt_space
        s0 << r4
        if r4
          r5 = _nt_year
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(HolidayYear,input, i0...index, s0)
      r0.extend(HolidayYear0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:holiday_year][start_index] = r0

    r0
  end

  module Holiday0
  end

  module Holiday1
  end

  module Holiday2
  end

  module Holiday3
    def eval(env = {})
      text_value
    end
  end

  def _nt_holiday
    start_index = index
    if node_cache[:holiday].has_key?(index)
      cached = node_cache[:holiday][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?('\G[a-zA-Z]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      i4, s4 = index, []
      if has_terminal?("'", false, index)
        r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("'")
        r5 = nil
      end
      s4 << r5
      if r5
        if has_terminal?('s', false, index)
          r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('s')
          r7 = nil
        end
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r6
      end
      if s4.last
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        r4.extend(Holiday0)
      else
        @index = i4
        r4 = nil
      end
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        s8, i8 = [], index
        loop do
          i9, s9 = index, []
          s10, i10 = [], index
          loop do
            if has_terminal?('\G[\\s]', true, index)
              r11 = true
              @index += 1
            else
              r11 = nil
            end
            if r11
              s10 << r11
            else
              break
            end
          end
          if s10.empty?
            @index = i10
            r10 = nil
          else
            r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
          end
          s9 << r10
          if r10
            s12, i12 = [], index
            loop do
              if has_terminal?('\G[a-zA-Z\']', true, index)
                r13 = true
                @index += 1
              else
                r13 = nil
              end
              if r13
                s12 << r13
              else
                break
              end
            end
            if s12.empty?
              @index = i12
              r12 = nil
            else
              r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
            end
            s9 << r12
          end
          if s9.last
            r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
            r9.extend(Holiday1)
          else
            @index = i9
            r9 = nil
          end
          if r9
            s8 << r9
          else
            break
          end
        end
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        s0 << r8
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Holiday2)
      r0.extend(Holiday3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:holiday][start_index] = r0

    r0
  end

  module From0
    def space
      elements[1]
    end
  end

  def _nt_from
    start_index = index
    if node_cache[:from].has_key?(index)
      cached = node_cache[:from][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i1, s1 = index, []
    i2 = index
    if has_terminal?('in', false, index)
      r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('in')
      r3 = nil
    end
    if r3
      r2 = r3
    else
      if has_terminal?('from', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('from')
        r4 = nil
      end
      if r4
        r2 = r4
      else
        @index = i2
        r2 = nil
      end
    end
    s1 << r2
    if r2
      r5 = _nt_space
      s1 << r5
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(From0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r0 = instantiate_node(SyntaxNode,input, index...index)
    end

    node_cache[:from][start_index] = r0

    r0
  end

  module To0
    def space1
      elements[0]
    end

    def space2
      elements[2]
    end
  end

  module To1
  end

  def _nt_to
    start_index = index
    if node_cache[:to].has_key?(index)
      cached = node_cache[:to][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_space
    s1 << r2
    if r2
      i3 = index
      if has_terminal?('to', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('to')
        r4 = nil
      end
      if r4
        r3 = r4
      else
        if has_terminal?('and', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure('and')
          r5 = nil
        end
        if r5
          r3 = r5
        else
          if has_terminal?('or', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('or')
            r6 = nil
          end
          if r6
            r3 = r6
          else
            @index = i3
            r3 = nil
          end
        end
      end
      s1 << r3
      if r3
        r7 = _nt_space
        s1 << r7
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(To0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i8, s8 = index, []
      r10 = _nt_space
      if r10
        r9 = r10
      else
        r9 = instantiate_node(SyntaxNode,input, index...index)
      end
      s8 << r9
      if r9
        if has_terminal?('-', false, index)
          r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('-')
          r11 = nil
        end
        s8 << r11
        if r11
          r13 = _nt_space
          if r13
            r12 = r13
          else
            r12 = instantiate_node(SyntaxNode,input, index...index)
          end
          s8 << r12
        end
      end
      if s8.last
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        r8.extend(To1)
      else
        @index = i8
        r8 = nil
      end
      if r8
        r0 = r8
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:to][start_index] = r0

    r0
  end

  module Of0
    def space
      elements[0]
    end

  end

  module Of1
  end

  module Of2
    def space
      elements[1]
    end
  end

  def _nt_of
    start_index = index
    if node_cache[:of].has_key?(index)
      cached = node_cache[:of][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    i2, s2 = index, []
    r3 = _nt_space
    s2 << r3
    if r3
      if has_terminal?('of', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('of')
        r4 = nil
      end
      s2 << r4
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(Of0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      i6, s6 = index, []
      r8 = _nt_space
      if r8
        r7 = r8
      else
        r7 = instantiate_node(SyntaxNode,input, index...index)
      end
      s6 << r7
      if r7
        if has_terminal?(',', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r9 = nil
        end
        s6 << r9
      end
      if s6.last
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        r6.extend(Of1)
      else
        @index = i6
        r6 = nil
      end
      if r6
        r5 = r6
      else
        r5 = instantiate_node(SyntaxNode,input, index...index)
      end
      if r5
        r1 = r5
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r10 = _nt_space
      s0 << r10
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Of2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:of][start_index] = r0

    r0
  end

  module BeginningOf0
    def space
      elements[1]
    end
  end

  module BeginningOf1
  end

  module BeginningOf2
    def space
      elements[1]
    end
  end

  def _nt_beginning_of
    start_index = index
    if node_cache[:beginning_of].has_key?(index)
      cached = node_cache[:beginning_of][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    i2, s2 = index, []
    i4, s4 = index, []
    if has_terminal?('the', false, index)
      r5 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('the')
      r5 = nil
    end
    s4 << r5
    if r5
      r6 = _nt_space
      s4 << r6
    end
    if s4.last
      r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      r4.extend(BeginningOf0)
    else
      @index = i4
      r4 = nil
    end
    if r4
      r3 = r4
    else
      r3 = instantiate_node(SyntaxNode,input, index...index)
    end
    s2 << r3
    if r3
      if has_terminal?('beginning of', false, index)
        r7 = instantiate_node(SyntaxNode,input, index...(index + 12))
        @index += 12
      else
        terminal_parse_failure('beginning of')
        r7 = nil
      end
      s2 << r7
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(BeginningOf1)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('early', false, index)
        r8 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure('early')
        r8 = nil
      end
      if r8
        r1 = r8
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r9 = _nt_space
      s0 << r9
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(BeginningOf2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:beginning_of][start_index] = r0

    r0
  end

  module EndOf0
    def space
      elements[1]
    end
  end

  module EndOf1
  end

  module EndOf2
    def space
      elements[1]
    end
  end

  def _nt_end_of
    start_index = index
    if node_cache[:end_of].has_key?(index)
      cached = node_cache[:end_of][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    i2, s2 = index, []
    i4, s4 = index, []
    if has_terminal?('the', false, index)
      r5 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('the')
      r5 = nil
    end
    s4 << r5
    if r5
      r6 = _nt_space
      s4 << r6
    end
    if s4.last
      r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      r4.extend(EndOf0)
    else
      @index = i4
      r4 = nil
    end
    if r4
      r3 = r4
    else
      r3 = instantiate_node(SyntaxNode,input, index...index)
    end
    s2 << r3
    if r3
      if has_terminal?('end of', false, index)
        r7 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure('end of')
        r7 = nil
      end
      s2 << r7
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(EndOf1)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('late', false, index)
        r8 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('late')
        r8 = nil
      end
      if r8
        r1 = r8
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r9 = _nt_space
      s0 << r9
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(EndOf2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:end_of][start_index] = r0

    r0
  end

  module MiddleOf0
    def space
      elements[1]
    end
  end

  module MiddleOf1
    def space
      elements[2]
    end
  end

  module MiddleOf2
  end

  def _nt_middle_of
    start_index = index
    if node_cache[:middle_of].has_key?(index)
      cached = node_cache[:middle_of][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    i3, s3 = index, []
    if has_terminal?('the', false, index)
      r4 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('the')
      r4 = nil
    end
    s3 << r4
    if r4
      r5 = _nt_space
      s3 << r5
    end
    if s3.last
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      r3.extend(MiddleOf0)
    else
      @index = i3
      r3 = nil
    end
    if r3
      r2 = r3
    else
      r2 = instantiate_node(SyntaxNode,input, index...index)
    end
    s1 << r2
    if r2
      if has_terminal?('middle of', false, index)
        r6 = instantiate_node(SyntaxNode,input, index...(index + 9))
        @index += 9
      else
        terminal_parse_failure('middle of')
        r6 = nil
      end
      s1 << r6
      if r6
        r7 = _nt_space
        s1 << r7
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(MiddleOf1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i8, s8 = index, []
      if has_terminal?('mid', false, index)
        r9 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure('mid')
        r9 = nil
      end
      s8 << r9
      if r9
        if has_terminal?('-', false, index)
          r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('-')
          r11 = nil
        end
        if r11
          r10 = r11
        else
          r10 = instantiate_node(SyntaxNode,input, index...index)
        end
        s8 << r10
        if r10
          r13 = _nt_space
          if r13
            r12 = r13
          else
            r12 = instantiate_node(SyntaxNode,input, index...index)
          end
          s8 << r12
        end
      end
      if s8.last
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        r8.extend(MiddleOf2)
      else
        @index = i8
        r8 = nil
      end
      if r8
        r0 = r8
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:middle_of][start_index] = r0

    r0
  end

  module Year0
    def number
      elements[3]
    end

  end

  def _nt_year
    start_index = index
    if node_cache[:year].has_key?(index)
      cached = node_cache[:year][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if has_terminal?('\G[\'´`]', true, index)
        r4 = true
        @index += 1
      else
        r4 = nil
      end
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        s5, i5 = [], index
        loop do
          if has_terminal?('0', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('0')
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s0 << r5
        if r5
          r7 = _nt_number
          s0 << r7
          if r7
            if has_terminal?(']', false, index)
              r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(']')
              r9 = nil
            end
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r8
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Year,input, i0...index, s0)
      r0.extend(Year0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:year][start_index] = r0

    r0
  end

  def _nt_month
    start_index = index
    if node_cache[:month].has_key?(index)
      cached = node_cache[:month][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_month_name
    if r1
      r0 = r1
    else
      r2 = _nt_month_number
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:month][start_index] = r0

    r0
  end

  module Day0
  end

  module Day1
  end

  module Day2
  end

  module Day3
  end

  module Day4
  end

  module Day5
  end

  module Day6
  end

  module Day7
  end

  module Day8
  end

  module Day9
  end

  module Day10
  end

  module Day11
  end

  module Day12
  end

  module Day13
  end

  module Day14
  end

  module Day15
  end

  module Day16
  end

  module Day17
  end

  module Day18
  end

  module Day19
  end

  module Day20
  end

  module Day21
  end

  module Day22
  end

  module Day23
  end

  module Day24
  end

  module Day25
  end

  module Day26
  end

  module Day27
  end

  module Day28
  end

  module Day29
  end

  module Day30
  end

  module Day31
  end

  module Day32
    def eval(env = {})
      text_value.gsub(/^\[/, '').gsub(/\]$/, '').gsub(/[stndr\.]/, '').gsub(/^0/, '').to_i
    end
  end

  def _nt_day
    start_index = index
    if node_cache[:day].has_key?(index)
      cached = node_cache[:day][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('[', false, index)
      r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r3 = nil
    end
    if r3
      r2 = r3
    else
      r2 = instantiate_node(SyntaxNode,input, index...index)
    end
    s1 << r2
    if r2
      i4 = index
      i5, s5 = index, []
      if has_terminal?('10', false, index)
        r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('10')
        r6 = nil
      end
      s5 << r6
      if r6
        i8 = index
        if has_terminal?('th', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('th')
          r9 = nil
        end
        if r9
          r8 = r9
        else
          if has_terminal?('.', false, index)
            r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('.')
            r10 = nil
          end
          if r10
            r8 = r10
          else
            @index = i8
            r8 = nil
          end
        end
        if r8
          r7 = r8
        else
          r7 = instantiate_node(SyntaxNode,input, index...index)
        end
        s5 << r7
      end
      if s5.last
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        r5.extend(Day0)
      else
        @index = i5
        r5 = nil
      end
      if r5
        r4 = r5
      else
        i11, s11 = index, []
        if has_terminal?('11', false, index)
          r12 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('11')
          r12 = nil
        end
        s11 << r12
        if r12
          i14 = index
          if has_terminal?('th', false, index)
            r15 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('th')
            r15 = nil
          end
          if r15
            r14 = r15
          else
            if has_terminal?('.', false, index)
              r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('.')
              r16 = nil
            end
            if r16
              r14 = r16
            else
              @index = i14
              r14 = nil
            end
          end
          if r14
            r13 = r14
          else
            r13 = instantiate_node(SyntaxNode,input, index...index)
          end
          s11 << r13
        end
        if s11.last
          r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
          r11.extend(Day1)
        else
          @index = i11
          r11 = nil
        end
        if r11
          r4 = r11
        else
          i17, s17 = index, []
          if has_terminal?('12', false, index)
            r18 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('12')
            r18 = nil
          end
          s17 << r18
          if r18
            i20 = index
            if has_terminal?('th', false, index)
              r21 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('th')
              r21 = nil
            end
            if r21
              r20 = r21
            else
              if has_terminal?('.', false, index)
                r22 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('.')
                r22 = nil
              end
              if r22
                r20 = r22
              else
                @index = i20
                r20 = nil
              end
            end
            if r20
              r19 = r20
            else
              r19 = instantiate_node(SyntaxNode,input, index...index)
            end
            s17 << r19
          end
          if s17.last
            r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
            r17.extend(Day2)
          else
            @index = i17
            r17 = nil
          end
          if r17
            r4 = r17
          else
            i23, s23 = index, []
            if has_terminal?('13', false, index)
              r24 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('13')
              r24 = nil
            end
            s23 << r24
            if r24
              i26 = index
              if has_terminal?('th', false, index)
                r27 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure('th')
                r27 = nil
              end
              if r27
                r26 = r27
              else
                if has_terminal?('.', false, index)
                  r28 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('.')
                  r28 = nil
                end
                if r28
                  r26 = r28
                else
                  @index = i26
                  r26 = nil
                end
              end
              if r26
                r25 = r26
              else
                r25 = instantiate_node(SyntaxNode,input, index...index)
              end
              s23 << r25
            end
            if s23.last
              r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
              r23.extend(Day3)
            else
              @index = i23
              r23 = nil
            end
            if r23
              r4 = r23
            else
              i29, s29 = index, []
              if has_terminal?('14', false, index)
                r30 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure('14')
                r30 = nil
              end
              s29 << r30
              if r30
                i32 = index
                if has_terminal?('th', false, index)
                  r33 = instantiate_node(SyntaxNode,input, index...(index + 2))
                  @index += 2
                else
                  terminal_parse_failure('th')
                  r33 = nil
                end
                if r33
                  r32 = r33
                else
                  if has_terminal?('.', false, index)
                    r34 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('.')
                    r34 = nil
                  end
                  if r34
                    r32 = r34
                  else
                    @index = i32
                    r32 = nil
                  end
                end
                if r32
                  r31 = r32
                else
                  r31 = instantiate_node(SyntaxNode,input, index...index)
                end
                s29 << r31
              end
              if s29.last
                r29 = instantiate_node(SyntaxNode,input, i29...index, s29)
                r29.extend(Day4)
              else
                @index = i29
                r29 = nil
              end
              if r29
                r4 = r29
              else
                i35, s35 = index, []
                if has_terminal?('15', false, index)
                  r36 = instantiate_node(SyntaxNode,input, index...(index + 2))
                  @index += 2
                else
                  terminal_parse_failure('15')
                  r36 = nil
                end
                s35 << r36
                if r36
                  i38 = index
                  if has_terminal?('th', false, index)
                    r39 = instantiate_node(SyntaxNode,input, index...(index + 2))
                    @index += 2
                  else
                    terminal_parse_failure('th')
                    r39 = nil
                  end
                  if r39
                    r38 = r39
                  else
                    if has_terminal?('.', false, index)
                      r40 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure('.')
                      r40 = nil
                    end
                    if r40
                      r38 = r40
                    else
                      @index = i38
                      r38 = nil
                    end
                  end
                  if r38
                    r37 = r38
                  else
                    r37 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s35 << r37
                end
                if s35.last
                  r35 = instantiate_node(SyntaxNode,input, i35...index, s35)
                  r35.extend(Day5)
                else
                  @index = i35
                  r35 = nil
                end
                if r35
                  r4 = r35
                else
                  i41, s41 = index, []
                  if has_terminal?('16', false, index)
                    r42 = instantiate_node(SyntaxNode,input, index...(index + 2))
                    @index += 2
                  else
                    terminal_parse_failure('16')
                    r42 = nil
                  end
                  s41 << r42
                  if r42
                    i44 = index
                    if has_terminal?('th', false, index)
                      r45 = instantiate_node(SyntaxNode,input, index...(index + 2))
                      @index += 2
                    else
                      terminal_parse_failure('th')
                      r45 = nil
                    end
                    if r45
                      r44 = r45
                    else
                      if has_terminal?('.', false, index)
                        r46 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure('.')
                        r46 = nil
                      end
                      if r46
                        r44 = r46
                      else
                        @index = i44
                        r44 = nil
                      end
                    end
                    if r44
                      r43 = r44
                    else
                      r43 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s41 << r43
                  end
                  if s41.last
                    r41 = instantiate_node(SyntaxNode,input, i41...index, s41)
                    r41.extend(Day6)
                  else
                    @index = i41
                    r41 = nil
                  end
                  if r41
                    r4 = r41
                  else
                    i47, s47 = index, []
                    if has_terminal?('17', false, index)
                      r48 = instantiate_node(SyntaxNode,input, index...(index + 2))
                      @index += 2
                    else
                      terminal_parse_failure('17')
                      r48 = nil
                    end
                    s47 << r48
                    if r48
                      i50 = index
                      if has_terminal?('th', false, index)
                        r51 = instantiate_node(SyntaxNode,input, index...(index + 2))
                        @index += 2
                      else
                        terminal_parse_failure('th')
                        r51 = nil
                      end
                      if r51
                        r50 = r51
                      else
                        if has_terminal?('.', false, index)
                          r52 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure('.')
                          r52 = nil
                        end
                        if r52
                          r50 = r52
                        else
                          @index = i50
                          r50 = nil
                        end
                      end
                      if r50
                        r49 = r50
                      else
                        r49 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s47 << r49
                    end
                    if s47.last
                      r47 = instantiate_node(SyntaxNode,input, i47...index, s47)
                      r47.extend(Day7)
                    else
                      @index = i47
                      r47 = nil
                    end
                    if r47
                      r4 = r47
                    else
                      i53, s53 = index, []
                      if has_terminal?('18', false, index)
                        r54 = instantiate_node(SyntaxNode,input, index...(index + 2))
                        @index += 2
                      else
                        terminal_parse_failure('18')
                        r54 = nil
                      end
                      s53 << r54
                      if r54
                        i56 = index
                        if has_terminal?('th', false, index)
                          r57 = instantiate_node(SyntaxNode,input, index...(index + 2))
                          @index += 2
                        else
                          terminal_parse_failure('th')
                          r57 = nil
                        end
                        if r57
                          r56 = r57
                        else
                          if has_terminal?('.', false, index)
                            r58 = instantiate_node(SyntaxNode,input, index...(index + 1))
                            @index += 1
                          else
                            terminal_parse_failure('.')
                            r58 = nil
                          end
                          if r58
                            r56 = r58
                          else
                            @index = i56
                            r56 = nil
                          end
                        end
                        if r56
                          r55 = r56
                        else
                          r55 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s53 << r55
                      end
                      if s53.last
                        r53 = instantiate_node(SyntaxNode,input, i53...index, s53)
                        r53.extend(Day8)
                      else
                        @index = i53
                        r53 = nil
                      end
                      if r53
                        r4 = r53
                      else
                        i59, s59 = index, []
                        if has_terminal?('19', false, index)
                          r60 = instantiate_node(SyntaxNode,input, index...(index + 2))
                          @index += 2
                        else
                          terminal_parse_failure('19')
                          r60 = nil
                        end
                        s59 << r60
                        if r60
                          i62 = index
                          if has_terminal?('th', false, index)
                            r63 = instantiate_node(SyntaxNode,input, index...(index + 2))
                            @index += 2
                          else
                            terminal_parse_failure('th')
                            r63 = nil
                          end
                          if r63
                            r62 = r63
                          else
                            if has_terminal?('.', false, index)
                              r64 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure('.')
                              r64 = nil
                            end
                            if r64
                              r62 = r64
                            else
                              @index = i62
                              r62 = nil
                            end
                          end
                          if r62
                            r61 = r62
                          else
                            r61 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s59 << r61
                        end
                        if s59.last
                          r59 = instantiate_node(SyntaxNode,input, i59...index, s59)
                          r59.extend(Day9)
                        else
                          @index = i59
                          r59 = nil
                        end
                        if r59
                          r4 = r59
                        else
                          i65, s65 = index, []
                          if has_terminal?('20', false, index)
                            r66 = instantiate_node(SyntaxNode,input, index...(index + 2))
                            @index += 2
                          else
                            terminal_parse_failure('20')
                            r66 = nil
                          end
                          s65 << r66
                          if r66
                            i68 = index
                            if has_terminal?('th', false, index)
                              r69 = instantiate_node(SyntaxNode,input, index...(index + 2))
                              @index += 2
                            else
                              terminal_parse_failure('th')
                              r69 = nil
                            end
                            if r69
                              r68 = r69
                            else
                              if has_terminal?('.', false, index)
                                r70 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                @index += 1
                              else
                                terminal_parse_failure('.')
                                r70 = nil
                              end
                              if r70
                                r68 = r70
                              else
                                @index = i68
                                r68 = nil
                              end
                            end
                            if r68
                              r67 = r68
                            else
                              r67 = instantiate_node(SyntaxNode,input, index...index)
                            end
                            s65 << r67
                          end
                          if s65.last
                            r65 = instantiate_node(SyntaxNode,input, i65...index, s65)
                            r65.extend(Day10)
                          else
                            @index = i65
                            r65 = nil
                          end
                          if r65
                            r4 = r65
                          else
                            i71, s71 = index, []
                            if has_terminal?('21', false, index)
                              r72 = instantiate_node(SyntaxNode,input, index...(index + 2))
                              @index += 2
                            else
                              terminal_parse_failure('21')
                              r72 = nil
                            end
                            s71 << r72
                            if r72
                              i74 = index
                              if has_terminal?('st', false, index)
                                r75 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                @index += 2
                              else
                                terminal_parse_failure('st')
                                r75 = nil
                              end
                              if r75
                                r74 = r75
                              else
                                if has_terminal?('.', false, index)
                                  r76 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                  @index += 1
                                else
                                  terminal_parse_failure('.')
                                  r76 = nil
                                end
                                if r76
                                  r74 = r76
                                else
                                  @index = i74
                                  r74 = nil
                                end
                              end
                              if r74
                                r73 = r74
                              else
                                r73 = instantiate_node(SyntaxNode,input, index...index)
                              end
                              s71 << r73
                            end
                            if s71.last
                              r71 = instantiate_node(SyntaxNode,input, i71...index, s71)
                              r71.extend(Day11)
                            else
                              @index = i71
                              r71 = nil
                            end
                            if r71
                              r4 = r71
                            else
                              i77, s77 = index, []
                              if has_terminal?('22', false, index)
                                r78 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                @index += 2
                              else
                                terminal_parse_failure('22')
                                r78 = nil
                              end
                              s77 << r78
                              if r78
                                i80 = index
                                if has_terminal?('nd', false, index)
                                  r81 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                  @index += 2
                                else
                                  terminal_parse_failure('nd')
                                  r81 = nil
                                end
                                if r81
                                  r80 = r81
                                else
                                  if has_terminal?('.', false, index)
                                    r82 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                    @index += 1
                                  else
                                    terminal_parse_failure('.')
                                    r82 = nil
                                  end
                                  if r82
                                    r80 = r82
                                  else
                                    @index = i80
                                    r80 = nil
                                  end
                                end
                                if r80
                                  r79 = r80
                                else
                                  r79 = instantiate_node(SyntaxNode,input, index...index)
                                end
                                s77 << r79
                              end
                              if s77.last
                                r77 = instantiate_node(SyntaxNode,input, i77...index, s77)
                                r77.extend(Day12)
                              else
                                @index = i77
                                r77 = nil
                              end
                              if r77
                                r4 = r77
                              else
                                i83, s83 = index, []
                                if has_terminal?('23', false, index)
                                  r84 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                  @index += 2
                                else
                                  terminal_parse_failure('23')
                                  r84 = nil
                                end
                                s83 << r84
                                if r84
                                  i86 = index
                                  if has_terminal?('rd', false, index)
                                    r87 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                    @index += 2
                                  else
                                    terminal_parse_failure('rd')
                                    r87 = nil
                                  end
                                  if r87
                                    r86 = r87
                                  else
                                    if has_terminal?('.', false, index)
                                      r88 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                      @index += 1
                                    else
                                      terminal_parse_failure('.')
                                      r88 = nil
                                    end
                                    if r88
                                      r86 = r88
                                    else
                                      @index = i86
                                      r86 = nil
                                    end
                                  end
                                  if r86
                                    r85 = r86
                                  else
                                    r85 = instantiate_node(SyntaxNode,input, index...index)
                                  end
                                  s83 << r85
                                end
                                if s83.last
                                  r83 = instantiate_node(SyntaxNode,input, i83...index, s83)
                                  r83.extend(Day13)
                                else
                                  @index = i83
                                  r83 = nil
                                end
                                if r83
                                  r4 = r83
                                else
                                  i89, s89 = index, []
                                  if has_terminal?('24', false, index)
                                    r90 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                    @index += 2
                                  else
                                    terminal_parse_failure('24')
                                    r90 = nil
                                  end
                                  s89 << r90
                                  if r90
                                    i92 = index
                                    if has_terminal?('th', false, index)
                                      r93 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                      @index += 2
                                    else
                                      terminal_parse_failure('th')
                                      r93 = nil
                                    end
                                    if r93
                                      r92 = r93
                                    else
                                      if has_terminal?('.', false, index)
                                        r94 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                        @index += 1
                                      else
                                        terminal_parse_failure('.')
                                        r94 = nil
                                      end
                                      if r94
                                        r92 = r94
                                      else
                                        @index = i92
                                        r92 = nil
                                      end
                                    end
                                    if r92
                                      r91 = r92
                                    else
                                      r91 = instantiate_node(SyntaxNode,input, index...index)
                                    end
                                    s89 << r91
                                  end
                                  if s89.last
                                    r89 = instantiate_node(SyntaxNode,input, i89...index, s89)
                                    r89.extend(Day14)
                                  else
                                    @index = i89
                                    r89 = nil
                                  end
                                  if r89
                                    r4 = r89
                                  else
                                    i95, s95 = index, []
                                    if has_terminal?('25', false, index)
                                      r96 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                      @index += 2
                                    else
                                      terminal_parse_failure('25')
                                      r96 = nil
                                    end
                                    s95 << r96
                                    if r96
                                      i98 = index
                                      if has_terminal?('th', false, index)
                                        r99 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                        @index += 2
                                      else
                                        terminal_parse_failure('th')
                                        r99 = nil
                                      end
                                      if r99
                                        r98 = r99
                                      else
                                        if has_terminal?('.', false, index)
                                          r100 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                          @index += 1
                                        else
                                          terminal_parse_failure('.')
                                          r100 = nil
                                        end
                                        if r100
                                          r98 = r100
                                        else
                                          @index = i98
                                          r98 = nil
                                        end
                                      end
                                      if r98
                                        r97 = r98
                                      else
                                        r97 = instantiate_node(SyntaxNode,input, index...index)
                                      end
                                      s95 << r97
                                    end
                                    if s95.last
                                      r95 = instantiate_node(SyntaxNode,input, i95...index, s95)
                                      r95.extend(Day15)
                                    else
                                      @index = i95
                                      r95 = nil
                                    end
                                    if r95
                                      r4 = r95
                                    else
                                      i101, s101 = index, []
                                      if has_terminal?('26', false, index)
                                        r102 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                        @index += 2
                                      else
                                        terminal_parse_failure('26')
                                        r102 = nil
                                      end
                                      s101 << r102
                                      if r102
                                        i104 = index
                                        if has_terminal?('th', false, index)
                                          r105 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                          @index += 2
                                        else
                                          terminal_parse_failure('th')
                                          r105 = nil
                                        end
                                        if r105
                                          r104 = r105
                                        else
                                          if has_terminal?('.', false, index)
                                            r106 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                            @index += 1
                                          else
                                            terminal_parse_failure('.')
                                            r106 = nil
                                          end
                                          if r106
                                            r104 = r106
                                          else
                                            @index = i104
                                            r104 = nil
                                          end
                                        end
                                        if r104
                                          r103 = r104
                                        else
                                          r103 = instantiate_node(SyntaxNode,input, index...index)
                                        end
                                        s101 << r103
                                      end
                                      if s101.last
                                        r101 = instantiate_node(SyntaxNode,input, i101...index, s101)
                                        r101.extend(Day16)
                                      else
                                        @index = i101
                                        r101 = nil
                                      end
                                      if r101
                                        r4 = r101
                                      else
                                        i107, s107 = index, []
                                        if has_terminal?('27', false, index)
                                          r108 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                          @index += 2
                                        else
                                          terminal_parse_failure('27')
                                          r108 = nil
                                        end
                                        s107 << r108
                                        if r108
                                          i110 = index
                                          if has_terminal?('th', false, index)
                                            r111 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                            @index += 2
                                          else
                                            terminal_parse_failure('th')
                                            r111 = nil
                                          end
                                          if r111
                                            r110 = r111
                                          else
                                            if has_terminal?('.', false, index)
                                              r112 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                              @index += 1
                                            else
                                              terminal_parse_failure('.')
                                              r112 = nil
                                            end
                                            if r112
                                              r110 = r112
                                            else
                                              @index = i110
                                              r110 = nil
                                            end
                                          end
                                          if r110
                                            r109 = r110
                                          else
                                            r109 = instantiate_node(SyntaxNode,input, index...index)
                                          end
                                          s107 << r109
                                        end
                                        if s107.last
                                          r107 = instantiate_node(SyntaxNode,input, i107...index, s107)
                                          r107.extend(Day17)
                                        else
                                          @index = i107
                                          r107 = nil
                                        end
                                        if r107
                                          r4 = r107
                                        else
                                          i113, s113 = index, []
                                          if has_terminal?('28', false, index)
                                            r114 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                            @index += 2
                                          else
                                            terminal_parse_failure('28')
                                            r114 = nil
                                          end
                                          s113 << r114
                                          if r114
                                            i116 = index
                                            if has_terminal?('th', false, index)
                                              r117 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                              @index += 2
                                            else
                                              terminal_parse_failure('th')
                                              r117 = nil
                                            end
                                            if r117
                                              r116 = r117
                                            else
                                              if has_terminal?('.', false, index)
                                                r118 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                @index += 1
                                              else
                                                terminal_parse_failure('.')
                                                r118 = nil
                                              end
                                              if r118
                                                r116 = r118
                                              else
                                                @index = i116
                                                r116 = nil
                                              end
                                            end
                                            if r116
                                              r115 = r116
                                            else
                                              r115 = instantiate_node(SyntaxNode,input, index...index)
                                            end
                                            s113 << r115
                                          end
                                          if s113.last
                                            r113 = instantiate_node(SyntaxNode,input, i113...index, s113)
                                            r113.extend(Day18)
                                          else
                                            @index = i113
                                            r113 = nil
                                          end
                                          if r113
                                            r4 = r113
                                          else
                                            i119, s119 = index, []
                                            if has_terminal?('29', false, index)
                                              r120 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                              @index += 2
                                            else
                                              terminal_parse_failure('29')
                                              r120 = nil
                                            end
                                            s119 << r120
                                            if r120
                                              i122 = index
                                              if has_terminal?('th', false, index)
                                                r123 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                                @index += 2
                                              else
                                                terminal_parse_failure('th')
                                                r123 = nil
                                              end
                                              if r123
                                                r122 = r123
                                              else
                                                if has_terminal?('.', false, index)
                                                  r124 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                  @index += 1
                                                else
                                                  terminal_parse_failure('.')
                                                  r124 = nil
                                                end
                                                if r124
                                                  r122 = r124
                                                else
                                                  @index = i122
                                                  r122 = nil
                                                end
                                              end
                                              if r122
                                                r121 = r122
                                              else
                                                r121 = instantiate_node(SyntaxNode,input, index...index)
                                              end
                                              s119 << r121
                                            end
                                            if s119.last
                                              r119 = instantiate_node(SyntaxNode,input, i119...index, s119)
                                              r119.extend(Day19)
                                            else
                                              @index = i119
                                              r119 = nil
                                            end
                                            if r119
                                              r4 = r119
                                            else
                                              i125, s125 = index, []
                                              if has_terminal?('30', false, index)
                                                r126 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                                @index += 2
                                              else
                                                terminal_parse_failure('30')
                                                r126 = nil
                                              end
                                              s125 << r126
                                              if r126
                                                i128 = index
                                                if has_terminal?('th', false, index)
                                                  r129 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                                  @index += 2
                                                else
                                                  terminal_parse_failure('th')
                                                  r129 = nil
                                                end
                                                if r129
                                                  r128 = r129
                                                else
                                                  if has_terminal?('.', false, index)
                                                    r130 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                    @index += 1
                                                  else
                                                    terminal_parse_failure('.')
                                                    r130 = nil
                                                  end
                                                  if r130
                                                    r128 = r130
                                                  else
                                                    @index = i128
                                                    r128 = nil
                                                  end
                                                end
                                                if r128
                                                  r127 = r128
                                                else
                                                  r127 = instantiate_node(SyntaxNode,input, index...index)
                                                end
                                                s125 << r127
                                              end
                                              if s125.last
                                                r125 = instantiate_node(SyntaxNode,input, i125...index, s125)
                                                r125.extend(Day20)
                                              else
                                                @index = i125
                                                r125 = nil
                                              end
                                              if r125
                                                r4 = r125
                                              else
                                                i131, s131 = index, []
                                                if has_terminal?('31', false, index)
                                                  r132 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                                  @index += 2
                                                else
                                                  terminal_parse_failure('31')
                                                  r132 = nil
                                                end
                                                s131 << r132
                                                if r132
                                                  i134 = index
                                                  if has_terminal?('st', false, index)
                                                    r135 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                                    @index += 2
                                                  else
                                                    terminal_parse_failure('st')
                                                    r135 = nil
                                                  end
                                                  if r135
                                                    r134 = r135
                                                  else
                                                    if has_terminal?('.', false, index)
                                                      r136 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                      @index += 1
                                                    else
                                                      terminal_parse_failure('.')
                                                      r136 = nil
                                                    end
                                                    if r136
                                                      r134 = r136
                                                    else
                                                      @index = i134
                                                      r134 = nil
                                                    end
                                                  end
                                                  if r134
                                                    r133 = r134
                                                  else
                                                    r133 = instantiate_node(SyntaxNode,input, index...index)
                                                  end
                                                  s131 << r133
                                                end
                                                if s131.last
                                                  r131 = instantiate_node(SyntaxNode,input, i131...index, s131)
                                                  r131.extend(Day21)
                                                else
                                                  @index = i131
                                                  r131 = nil
                                                end
                                                if r131
                                                  r4 = r131
                                                else
                                                  i137, s137 = index, []
                                                  if has_terminal?('0', false, index)
                                                    r139 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                    @index += 1
                                                  else
                                                    terminal_parse_failure('0')
                                                    r139 = nil
                                                  end
                                                  if r139
                                                    r138 = r139
                                                  else
                                                    r138 = instantiate_node(SyntaxNode,input, index...index)
                                                  end
                                                  s137 << r138
                                                  if r138
                                                    if has_terminal?('1', false, index)
                                                      r140 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                      @index += 1
                                                    else
                                                      terminal_parse_failure('1')
                                                      r140 = nil
                                                    end
                                                    s137 << r140
                                                    if r140
                                                      i142 = index
                                                      if has_terminal?('st', false, index)
                                                        r143 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                                        @index += 2
                                                      else
                                                        terminal_parse_failure('st')
                                                        r143 = nil
                                                      end
                                                      if r143
                                                        r142 = r143
                                                      else
                                                        if has_terminal?('.', false, index)
                                                          r144 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                          @index += 1
                                                        else
                                                          terminal_parse_failure('.')
                                                          r144 = nil
                                                        end
                                                        if r144
                                                          r142 = r144
                                                        else
                                                          @index = i142
                                                          r142 = nil
                                                        end
                                                      end
                                                      if r142
                                                        r141 = r142
                                                      else
                                                        r141 = instantiate_node(SyntaxNode,input, index...index)
                                                      end
                                                      s137 << r141
                                                    end
                                                  end
                                                  if s137.last
                                                    r137 = instantiate_node(SyntaxNode,input, i137...index, s137)
                                                    r137.extend(Day22)
                                                  else
                                                    @index = i137
                                                    r137 = nil
                                                  end
                                                  if r137
                                                    r4 = r137
                                                  else
                                                    i145, s145 = index, []
                                                    if has_terminal?('0', false, index)
                                                      r147 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                      @index += 1
                                                    else
                                                      terminal_parse_failure('0')
                                                      r147 = nil
                                                    end
                                                    if r147
                                                      r146 = r147
                                                    else
                                                      r146 = instantiate_node(SyntaxNode,input, index...index)
                                                    end
                                                    s145 << r146
                                                    if r146
                                                      if has_terminal?('2', false, index)
                                                        r148 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                        @index += 1
                                                      else
                                                        terminal_parse_failure('2')
                                                        r148 = nil
                                                      end
                                                      s145 << r148
                                                      if r148
                                                        i150 = index
                                                        if has_terminal?('nd', false, index)
                                                          r151 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                                          @index += 2
                                                        else
                                                          terminal_parse_failure('nd')
                                                          r151 = nil
                                                        end
                                                        if r151
                                                          r150 = r151
                                                        else
                                                          if has_terminal?('.', false, index)
                                                            r152 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                            @index += 1
                                                          else
                                                            terminal_parse_failure('.')
                                                            r152 = nil
                                                          end
                                                          if r152
                                                            r150 = r152
                                                          else
                                                            @index = i150
                                                            r150 = nil
                                                          end
                                                        end
                                                        if r150
                                                          r149 = r150
                                                        else
                                                          r149 = instantiate_node(SyntaxNode,input, index...index)
                                                        end
                                                        s145 << r149
                                                      end
                                                    end
                                                    if s145.last
                                                      r145 = instantiate_node(SyntaxNode,input, i145...index, s145)
                                                      r145.extend(Day23)
                                                    else
                                                      @index = i145
                                                      r145 = nil
                                                    end
                                                    if r145
                                                      r4 = r145
                                                    else
                                                      i153, s153 = index, []
                                                      if has_terminal?('0', false, index)
                                                        r155 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                        @index += 1
                                                      else
                                                        terminal_parse_failure('0')
                                                        r155 = nil
                                                      end
                                                      if r155
                                                        r154 = r155
                                                      else
                                                        r154 = instantiate_node(SyntaxNode,input, index...index)
                                                      end
                                                      s153 << r154
                                                      if r154
                                                        if has_terminal?('3', false, index)
                                                          r156 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                          @index += 1
                                                        else
                                                          terminal_parse_failure('3')
                                                          r156 = nil
                                                        end
                                                        s153 << r156
                                                        if r156
                                                          i158 = index
                                                          if has_terminal?('rd', false, index)
                                                            r159 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                                            @index += 2
                                                          else
                                                            terminal_parse_failure('rd')
                                                            r159 = nil
                                                          end
                                                          if r159
                                                            r158 = r159
                                                          else
                                                            if has_terminal?('.', false, index)
                                                              r160 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                              @index += 1
                                                            else
                                                              terminal_parse_failure('.')
                                                              r160 = nil
                                                            end
                                                            if r160
                                                              r158 = r160
                                                            else
                                                              @index = i158
                                                              r158 = nil
                                                            end
                                                          end
                                                          if r158
                                                            r157 = r158
                                                          else
                                                            r157 = instantiate_node(SyntaxNode,input, index...index)
                                                          end
                                                          s153 << r157
                                                        end
                                                      end
                                                      if s153.last
                                                        r153 = instantiate_node(SyntaxNode,input, i153...index, s153)
                                                        r153.extend(Day24)
                                                      else
                                                        @index = i153
                                                        r153 = nil
                                                      end
                                                      if r153
                                                        r4 = r153
                                                      else
                                                        i161, s161 = index, []
                                                        if has_terminal?('0', false, index)
                                                          r163 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                          @index += 1
                                                        else
                                                          terminal_parse_failure('0')
                                                          r163 = nil
                                                        end
                                                        if r163
                                                          r162 = r163
                                                        else
                                                          r162 = instantiate_node(SyntaxNode,input, index...index)
                                                        end
                                                        s161 << r162
                                                        if r162
                                                          if has_terminal?('4', false, index)
                                                            r164 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                            @index += 1
                                                          else
                                                            terminal_parse_failure('4')
                                                            r164 = nil
                                                          end
                                                          s161 << r164
                                                          if r164
                                                            i166 = index
                                                            if has_terminal?('th', false, index)
                                                              r167 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                                              @index += 2
                                                            else
                                                              terminal_parse_failure('th')
                                                              r167 = nil
                                                            end
                                                            if r167
                                                              r166 = r167
                                                            else
                                                              if has_terminal?('.', false, index)
                                                                r168 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                @index += 1
                                                              else
                                                                terminal_parse_failure('.')
                                                                r168 = nil
                                                              end
                                                              if r168
                                                                r166 = r168
                                                              else
                                                                @index = i166
                                                                r166 = nil
                                                              end
                                                            end
                                                            if r166
                                                              r165 = r166
                                                            else
                                                              r165 = instantiate_node(SyntaxNode,input, index...index)
                                                            end
                                                            s161 << r165
                                                          end
                                                        end
                                                        if s161.last
                                                          r161 = instantiate_node(SyntaxNode,input, i161...index, s161)
                                                          r161.extend(Day25)
                                                        else
                                                          @index = i161
                                                          r161 = nil
                                                        end
                                                        if r161
                                                          r4 = r161
                                                        else
                                                          i169, s169 = index, []
                                                          if has_terminal?('0', false, index)
                                                            r171 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                            @index += 1
                                                          else
                                                            terminal_parse_failure('0')
                                                            r171 = nil
                                                          end
                                                          if r171
                                                            r170 = r171
                                                          else
                                                            r170 = instantiate_node(SyntaxNode,input, index...index)
                                                          end
                                                          s169 << r170
                                                          if r170
                                                            if has_terminal?('5', false, index)
                                                              r172 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                              @index += 1
                                                            else
                                                              terminal_parse_failure('5')
                                                              r172 = nil
                                                            end
                                                            s169 << r172
                                                            if r172
                                                              i174 = index
                                                              if has_terminal?('th', false, index)
                                                                r175 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                                                @index += 2
                                                              else
                                                                terminal_parse_failure('th')
                                                                r175 = nil
                                                              end
                                                              if r175
                                                                r174 = r175
                                                              else
                                                                if has_terminal?('.', false, index)
                                                                  r176 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                  @index += 1
                                                                else
                                                                  terminal_parse_failure('.')
                                                                  r176 = nil
                                                                end
                                                                if r176
                                                                  r174 = r176
                                                                else
                                                                  @index = i174
                                                                  r174 = nil
                                                                end
                                                              end
                                                              if r174
                                                                r173 = r174
                                                              else
                                                                r173 = instantiate_node(SyntaxNode,input, index...index)
                                                              end
                                                              s169 << r173
                                                            end
                                                          end
                                                          if s169.last
                                                            r169 = instantiate_node(SyntaxNode,input, i169...index, s169)
                                                            r169.extend(Day26)
                                                          else
                                                            @index = i169
                                                            r169 = nil
                                                          end
                                                          if r169
                                                            r4 = r169
                                                          else
                                                            i177, s177 = index, []
                                                            if has_terminal?('0', false, index)
                                                              r179 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                              @index += 1
                                                            else
                                                              terminal_parse_failure('0')
                                                              r179 = nil
                                                            end
                                                            if r179
                                                              r178 = r179
                                                            else
                                                              r178 = instantiate_node(SyntaxNode,input, index...index)
                                                            end
                                                            s177 << r178
                                                            if r178
                                                              if has_terminal?('6', false, index)
                                                                r180 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                @index += 1
                                                              else
                                                                terminal_parse_failure('6')
                                                                r180 = nil
                                                              end
                                                              s177 << r180
                                                              if r180
                                                                i182 = index
                                                                if has_terminal?('th', false, index)
                                                                  r183 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                                                  @index += 2
                                                                else
                                                                  terminal_parse_failure('th')
                                                                  r183 = nil
                                                                end
                                                                if r183
                                                                  r182 = r183
                                                                else
                                                                  if has_terminal?('.', false, index)
                                                                    r184 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                    @index += 1
                                                                  else
                                                                    terminal_parse_failure('.')
                                                                    r184 = nil
                                                                  end
                                                                  if r184
                                                                    r182 = r184
                                                                  else
                                                                    @index = i182
                                                                    r182 = nil
                                                                  end
                                                                end
                                                                if r182
                                                                  r181 = r182
                                                                else
                                                                  r181 = instantiate_node(SyntaxNode,input, index...index)
                                                                end
                                                                s177 << r181
                                                              end
                                                            end
                                                            if s177.last
                                                              r177 = instantiate_node(SyntaxNode,input, i177...index, s177)
                                                              r177.extend(Day27)
                                                            else
                                                              @index = i177
                                                              r177 = nil
                                                            end
                                                            if r177
                                                              r4 = r177
                                                            else
                                                              i185, s185 = index, []
                                                              if has_terminal?('0', false, index)
                                                                r187 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                @index += 1
                                                              else
                                                                terminal_parse_failure('0')
                                                                r187 = nil
                                                              end
                                                              if r187
                                                                r186 = r187
                                                              else
                                                                r186 = instantiate_node(SyntaxNode,input, index...index)
                                                              end
                                                              s185 << r186
                                                              if r186
                                                                if has_terminal?('7', false, index)
                                                                  r188 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                  @index += 1
                                                                else
                                                                  terminal_parse_failure('7')
                                                                  r188 = nil
                                                                end
                                                                s185 << r188
                                                                if r188
                                                                  i190 = index
                                                                  if has_terminal?('th', false, index)
                                                                    r191 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                                                    @index += 2
                                                                  else
                                                                    terminal_parse_failure('th')
                                                                    r191 = nil
                                                                  end
                                                                  if r191
                                                                    r190 = r191
                                                                  else
                                                                    if has_terminal?('.', false, index)
                                                                      r192 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                      @index += 1
                                                                    else
                                                                      terminal_parse_failure('.')
                                                                      r192 = nil
                                                                    end
                                                                    if r192
                                                                      r190 = r192
                                                                    else
                                                                      @index = i190
                                                                      r190 = nil
                                                                    end
                                                                  end
                                                                  if r190
                                                                    r189 = r190
                                                                  else
                                                                    r189 = instantiate_node(SyntaxNode,input, index...index)
                                                                  end
                                                                  s185 << r189
                                                                end
                                                              end
                                                              if s185.last
                                                                r185 = instantiate_node(SyntaxNode,input, i185...index, s185)
                                                                r185.extend(Day28)
                                                              else
                                                                @index = i185
                                                                r185 = nil
                                                              end
                                                              if r185
                                                                r4 = r185
                                                              else
                                                                i193, s193 = index, []
                                                                if has_terminal?('0', false, index)
                                                                  r195 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                  @index += 1
                                                                else
                                                                  terminal_parse_failure('0')
                                                                  r195 = nil
                                                                end
                                                                if r195
                                                                  r194 = r195
                                                                else
                                                                  r194 = instantiate_node(SyntaxNode,input, index...index)
                                                                end
                                                                s193 << r194
                                                                if r194
                                                                  if has_terminal?('8', false, index)
                                                                    r196 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                    @index += 1
                                                                  else
                                                                    terminal_parse_failure('8')
                                                                    r196 = nil
                                                                  end
                                                                  s193 << r196
                                                                  if r196
                                                                    i198 = index
                                                                    if has_terminal?('th', false, index)
                                                                      r199 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                                                      @index += 2
                                                                    else
                                                                      terminal_parse_failure('th')
                                                                      r199 = nil
                                                                    end
                                                                    if r199
                                                                      r198 = r199
                                                                    else
                                                                      if has_terminal?('.', false, index)
                                                                        r200 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                        @index += 1
                                                                      else
                                                                        terminal_parse_failure('.')
                                                                        r200 = nil
                                                                      end
                                                                      if r200
                                                                        r198 = r200
                                                                      else
                                                                        @index = i198
                                                                        r198 = nil
                                                                      end
                                                                    end
                                                                    if r198
                                                                      r197 = r198
                                                                    else
                                                                      r197 = instantiate_node(SyntaxNode,input, index...index)
                                                                    end
                                                                    s193 << r197
                                                                  end
                                                                end
                                                                if s193.last
                                                                  r193 = instantiate_node(SyntaxNode,input, i193...index, s193)
                                                                  r193.extend(Day29)
                                                                else
                                                                  @index = i193
                                                                  r193 = nil
                                                                end
                                                                if r193
                                                                  r4 = r193
                                                                else
                                                                  i201, s201 = index, []
                                                                  if has_terminal?('0', false, index)
                                                                    r203 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                    @index += 1
                                                                  else
                                                                    terminal_parse_failure('0')
                                                                    r203 = nil
                                                                  end
                                                                  if r203
                                                                    r202 = r203
                                                                  else
                                                                    r202 = instantiate_node(SyntaxNode,input, index...index)
                                                                  end
                                                                  s201 << r202
                                                                  if r202
                                                                    if has_terminal?('9', false, index)
                                                                      r204 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                      @index += 1
                                                                    else
                                                                      terminal_parse_failure('9')
                                                                      r204 = nil
                                                                    end
                                                                    s201 << r204
                                                                    if r204
                                                                      i206 = index
                                                                      if has_terminal?('th', false, index)
                                                                        r207 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                                                        @index += 2
                                                                      else
                                                                        terminal_parse_failure('th')
                                                                        r207 = nil
                                                                      end
                                                                      if r207
                                                                        r206 = r207
                                                                      else
                                                                        if has_terminal?('.', false, index)
                                                                          r208 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                          @index += 1
                                                                        else
                                                                          terminal_parse_failure('.')
                                                                          r208 = nil
                                                                        end
                                                                        if r208
                                                                          r206 = r208
                                                                        else
                                                                          @index = i206
                                                                          r206 = nil
                                                                        end
                                                                      end
                                                                      if r206
                                                                        r205 = r206
                                                                      else
                                                                        r205 = instantiate_node(SyntaxNode,input, index...index)
                                                                      end
                                                                      s201 << r205
                                                                    end
                                                                  end
                                                                  if s201.last
                                                                    r201 = instantiate_node(SyntaxNode,input, i201...index, s201)
                                                                    r201.extend(Day30)
                                                                  else
                                                                    @index = i201
                                                                    r201 = nil
                                                                  end
                                                                  if r201
                                                                    r4 = r201
                                                                  else
                                                                    @index = i4
                                                                    r4 = nil
                                                                  end
                                                                end
                                                              end
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      s1 << r4
      if r4
        if has_terminal?(']', false, index)
          r210 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(']')
          r210 = nil
        end
        if r210
          r209 = r210
        else
          r209 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r209
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Day31)
      r1.extend(Day32)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r211 = _nt_outwritten_day
      if r211
        r0 = r211
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:day][start_index] = r0

    r0
  end

  module DayNumber0
  end

  module DayNumber1
  end

  module DayNumber2
  end

  module DayNumber3
  end

  module DayNumber4
  end

  module DayNumber5
  end

  module DayNumber6
  end

  module DayNumber7
  end

  module DayNumber8
  end

  module DayNumber9
  end

  module DayNumber10
    def eval(env = {})
      text_value.gsub(/^\[/, '').gsub(/\]$/, '').gsub(/^0/, '').to_i
    end
  end

  def _nt_day_number
    start_index = index
    if node_cache[:day_number].has_key?(index)
      cached = node_cache[:day_number][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      i3 = index
      if has_terminal?('10', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('10')
        r4 = nil
      end
      if r4
        r3 = r4
      else
        if has_terminal?('11', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('11')
          r5 = nil
        end
        if r5
          r3 = r5
        else
          if has_terminal?('12', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('12')
            r6 = nil
          end
          if r6
            r3 = r6
          else
            if has_terminal?('13', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('13')
              r7 = nil
            end
            if r7
              r3 = r7
            else
              if has_terminal?('14', false, index)
                r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure('14')
                r8 = nil
              end
              if r8
                r3 = r8
              else
                if has_terminal?('15', false, index)
                  r9 = instantiate_node(SyntaxNode,input, index...(index + 2))
                  @index += 2
                else
                  terminal_parse_failure('15')
                  r9 = nil
                end
                if r9
                  r3 = r9
                else
                  if has_terminal?('16', false, index)
                    r10 = instantiate_node(SyntaxNode,input, index...(index + 2))
                    @index += 2
                  else
                    terminal_parse_failure('16')
                    r10 = nil
                  end
                  if r10
                    r3 = r10
                  else
                    if has_terminal?('17', false, index)
                      r11 = instantiate_node(SyntaxNode,input, index...(index + 2))
                      @index += 2
                    else
                      terminal_parse_failure('17')
                      r11 = nil
                    end
                    if r11
                      r3 = r11
                    else
                      if has_terminal?('18', false, index)
                        r12 = instantiate_node(SyntaxNode,input, index...(index + 2))
                        @index += 2
                      else
                        terminal_parse_failure('18')
                        r12 = nil
                      end
                      if r12
                        r3 = r12
                      else
                        if has_terminal?('19', false, index)
                          r13 = instantiate_node(SyntaxNode,input, index...(index + 2))
                          @index += 2
                        else
                          terminal_parse_failure('19')
                          r13 = nil
                        end
                        if r13
                          r3 = r13
                        else
                          if has_terminal?('20', false, index)
                            r14 = instantiate_node(SyntaxNode,input, index...(index + 2))
                            @index += 2
                          else
                            terminal_parse_failure('20')
                            r14 = nil
                          end
                          if r14
                            r3 = r14
                          else
                            if has_terminal?('21', false, index)
                              r15 = instantiate_node(SyntaxNode,input, index...(index + 2))
                              @index += 2
                            else
                              terminal_parse_failure('21')
                              r15 = nil
                            end
                            if r15
                              r3 = r15
                            else
                              if has_terminal?('22', false, index)
                                r16 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                @index += 2
                              else
                                terminal_parse_failure('22')
                                r16 = nil
                              end
                              if r16
                                r3 = r16
                              else
                                if has_terminal?('23', false, index)
                                  r17 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                  @index += 2
                                else
                                  terminal_parse_failure('23')
                                  r17 = nil
                                end
                                if r17
                                  r3 = r17
                                else
                                  if has_terminal?('24', false, index)
                                    r18 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                    @index += 2
                                  else
                                    terminal_parse_failure('24')
                                    r18 = nil
                                  end
                                  if r18
                                    r3 = r18
                                  else
                                    if has_terminal?('25', false, index)
                                      r19 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                      @index += 2
                                    else
                                      terminal_parse_failure('25')
                                      r19 = nil
                                    end
                                    if r19
                                      r3 = r19
                                    else
                                      if has_terminal?('26', false, index)
                                        r20 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                        @index += 2
                                      else
                                        terminal_parse_failure('26')
                                        r20 = nil
                                      end
                                      if r20
                                        r3 = r20
                                      else
                                        if has_terminal?('27', false, index)
                                          r21 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                          @index += 2
                                        else
                                          terminal_parse_failure('27')
                                          r21 = nil
                                        end
                                        if r21
                                          r3 = r21
                                        else
                                          if has_terminal?('28', false, index)
                                            r22 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                            @index += 2
                                          else
                                            terminal_parse_failure('28')
                                            r22 = nil
                                          end
                                          if r22
                                            r3 = r22
                                          else
                                            if has_terminal?('29', false, index)
                                              r23 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                              @index += 2
                                            else
                                              terminal_parse_failure('29')
                                              r23 = nil
                                            end
                                            if r23
                                              r3 = r23
                                            else
                                              if has_terminal?('30', false, index)
                                                r24 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                                @index += 2
                                              else
                                                terminal_parse_failure('30')
                                                r24 = nil
                                              end
                                              if r24
                                                r3 = r24
                                              else
                                                if has_terminal?('31', false, index)
                                                  r25 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                                  @index += 2
                                                else
                                                  terminal_parse_failure('31')
                                                  r25 = nil
                                                end
                                                if r25
                                                  r3 = r25
                                                else
                                                  i26, s26 = index, []
                                                  if has_terminal?('0', false, index)
                                                    r28 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                    @index += 1
                                                  else
                                                    terminal_parse_failure('0')
                                                    r28 = nil
                                                  end
                                                  if r28
                                                    r27 = r28
                                                  else
                                                    r27 = instantiate_node(SyntaxNode,input, index...index)
                                                  end
                                                  s26 << r27
                                                  if r27
                                                    if has_terminal?('1', false, index)
                                                      r29 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                      @index += 1
                                                    else
                                                      terminal_parse_failure('1')
                                                      r29 = nil
                                                    end
                                                    s26 << r29
                                                  end
                                                  if s26.last
                                                    r26 = instantiate_node(SyntaxNode,input, i26...index, s26)
                                                    r26.extend(DayNumber0)
                                                  else
                                                    @index = i26
                                                    r26 = nil
                                                  end
                                                  if r26
                                                    r3 = r26
                                                  else
                                                    i30, s30 = index, []
                                                    if has_terminal?('0', false, index)
                                                      r32 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                      @index += 1
                                                    else
                                                      terminal_parse_failure('0')
                                                      r32 = nil
                                                    end
                                                    if r32
                                                      r31 = r32
                                                    else
                                                      r31 = instantiate_node(SyntaxNode,input, index...index)
                                                    end
                                                    s30 << r31
                                                    if r31
                                                      if has_terminal?('2', false, index)
                                                        r33 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                        @index += 1
                                                      else
                                                        terminal_parse_failure('2')
                                                        r33 = nil
                                                      end
                                                      s30 << r33
                                                    end
                                                    if s30.last
                                                      r30 = instantiate_node(SyntaxNode,input, i30...index, s30)
                                                      r30.extend(DayNumber1)
                                                    else
                                                      @index = i30
                                                      r30 = nil
                                                    end
                                                    if r30
                                                      r3 = r30
                                                    else
                                                      i34, s34 = index, []
                                                      if has_terminal?('0', false, index)
                                                        r36 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                        @index += 1
                                                      else
                                                        terminal_parse_failure('0')
                                                        r36 = nil
                                                      end
                                                      if r36
                                                        r35 = r36
                                                      else
                                                        r35 = instantiate_node(SyntaxNode,input, index...index)
                                                      end
                                                      s34 << r35
                                                      if r35
                                                        if has_terminal?('3', false, index)
                                                          r37 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                          @index += 1
                                                        else
                                                          terminal_parse_failure('3')
                                                          r37 = nil
                                                        end
                                                        s34 << r37
                                                      end
                                                      if s34.last
                                                        r34 = instantiate_node(SyntaxNode,input, i34...index, s34)
                                                        r34.extend(DayNumber2)
                                                      else
                                                        @index = i34
                                                        r34 = nil
                                                      end
                                                      if r34
                                                        r3 = r34
                                                      else
                                                        i38, s38 = index, []
                                                        if has_terminal?('0', false, index)
                                                          r40 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                          @index += 1
                                                        else
                                                          terminal_parse_failure('0')
                                                          r40 = nil
                                                        end
                                                        if r40
                                                          r39 = r40
                                                        else
                                                          r39 = instantiate_node(SyntaxNode,input, index...index)
                                                        end
                                                        s38 << r39
                                                        if r39
                                                          if has_terminal?('4', false, index)
                                                            r41 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                            @index += 1
                                                          else
                                                            terminal_parse_failure('4')
                                                            r41 = nil
                                                          end
                                                          s38 << r41
                                                        end
                                                        if s38.last
                                                          r38 = instantiate_node(SyntaxNode,input, i38...index, s38)
                                                          r38.extend(DayNumber3)
                                                        else
                                                          @index = i38
                                                          r38 = nil
                                                        end
                                                        if r38
                                                          r3 = r38
                                                        else
                                                          i42, s42 = index, []
                                                          if has_terminal?('0', false, index)
                                                            r44 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                            @index += 1
                                                          else
                                                            terminal_parse_failure('0')
                                                            r44 = nil
                                                          end
                                                          if r44
                                                            r43 = r44
                                                          else
                                                            r43 = instantiate_node(SyntaxNode,input, index...index)
                                                          end
                                                          s42 << r43
                                                          if r43
                                                            if has_terminal?('5', false, index)
                                                              r45 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                              @index += 1
                                                            else
                                                              terminal_parse_failure('5')
                                                              r45 = nil
                                                            end
                                                            s42 << r45
                                                          end
                                                          if s42.last
                                                            r42 = instantiate_node(SyntaxNode,input, i42...index, s42)
                                                            r42.extend(DayNumber4)
                                                          else
                                                            @index = i42
                                                            r42 = nil
                                                          end
                                                          if r42
                                                            r3 = r42
                                                          else
                                                            i46, s46 = index, []
                                                            if has_terminal?('0', false, index)
                                                              r48 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                              @index += 1
                                                            else
                                                              terminal_parse_failure('0')
                                                              r48 = nil
                                                            end
                                                            if r48
                                                              r47 = r48
                                                            else
                                                              r47 = instantiate_node(SyntaxNode,input, index...index)
                                                            end
                                                            s46 << r47
                                                            if r47
                                                              if has_terminal?('6', false, index)
                                                                r49 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                @index += 1
                                                              else
                                                                terminal_parse_failure('6')
                                                                r49 = nil
                                                              end
                                                              s46 << r49
                                                            end
                                                            if s46.last
                                                              r46 = instantiate_node(SyntaxNode,input, i46...index, s46)
                                                              r46.extend(DayNumber5)
                                                            else
                                                              @index = i46
                                                              r46 = nil
                                                            end
                                                            if r46
                                                              r3 = r46
                                                            else
                                                              i50, s50 = index, []
                                                              if has_terminal?('0', false, index)
                                                                r52 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                @index += 1
                                                              else
                                                                terminal_parse_failure('0')
                                                                r52 = nil
                                                              end
                                                              if r52
                                                                r51 = r52
                                                              else
                                                                r51 = instantiate_node(SyntaxNode,input, index...index)
                                                              end
                                                              s50 << r51
                                                              if r51
                                                                if has_terminal?('7', false, index)
                                                                  r53 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                  @index += 1
                                                                else
                                                                  terminal_parse_failure('7')
                                                                  r53 = nil
                                                                end
                                                                s50 << r53
                                                              end
                                                              if s50.last
                                                                r50 = instantiate_node(SyntaxNode,input, i50...index, s50)
                                                                r50.extend(DayNumber6)
                                                              else
                                                                @index = i50
                                                                r50 = nil
                                                              end
                                                              if r50
                                                                r3 = r50
                                                              else
                                                                i54, s54 = index, []
                                                                if has_terminal?('0', false, index)
                                                                  r56 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                  @index += 1
                                                                else
                                                                  terminal_parse_failure('0')
                                                                  r56 = nil
                                                                end
                                                                if r56
                                                                  r55 = r56
                                                                else
                                                                  r55 = instantiate_node(SyntaxNode,input, index...index)
                                                                end
                                                                s54 << r55
                                                                if r55
                                                                  if has_terminal?('8', false, index)
                                                                    r57 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                    @index += 1
                                                                  else
                                                                    terminal_parse_failure('8')
                                                                    r57 = nil
                                                                  end
                                                                  s54 << r57
                                                                end
                                                                if s54.last
                                                                  r54 = instantiate_node(SyntaxNode,input, i54...index, s54)
                                                                  r54.extend(DayNumber7)
                                                                else
                                                                  @index = i54
                                                                  r54 = nil
                                                                end
                                                                if r54
                                                                  r3 = r54
                                                                else
                                                                  i58, s58 = index, []
                                                                  if has_terminal?('0', false, index)
                                                                    r60 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                    @index += 1
                                                                  else
                                                                    terminal_parse_failure('0')
                                                                    r60 = nil
                                                                  end
                                                                  if r60
                                                                    r59 = r60
                                                                  else
                                                                    r59 = instantiate_node(SyntaxNode,input, index...index)
                                                                  end
                                                                  s58 << r59
                                                                  if r59
                                                                    if has_terminal?('9', false, index)
                                                                      r61 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                      @index += 1
                                                                    else
                                                                      terminal_parse_failure('9')
                                                                      r61 = nil
                                                                    end
                                                                    s58 << r61
                                                                  end
                                                                  if s58.last
                                                                    r58 = instantiate_node(SyntaxNode,input, i58...index, s58)
                                                                    r58.extend(DayNumber8)
                                                                  else
                                                                    @index = i58
                                                                    r58 = nil
                                                                  end
                                                                  if r58
                                                                    r3 = r58
                                                                  else
                                                                    @index = i3
                                                                    r3 = nil
                                                                  end
                                                                end
                                                              end
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      s0 << r3
      if r3
        if has_terminal?(']', false, index)
          r63 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(']')
          r63 = nil
        end
        if r63
          r62 = r63
        else
          r62 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r62
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(DayNumber9)
      r0.extend(DayNumber10)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:day_number][start_index] = r0

    r0
  end

  module DayOrdinal0
  end

  module DayOrdinal1
  end

  module DayOrdinal2
  end

  module DayOrdinal3
  end

  module DayOrdinal4
  end

  module DayOrdinal5
  end

  module DayOrdinal6
  end

  module DayOrdinal7
  end

  module DayOrdinal8
  end

  module DayOrdinal9
  end

  module DayOrdinal10
    def eval(env = {})
      text_value.gsub(/^\[/, '').gsub(/\]$/, '').gsub(/[stndr]/, '').gsub(/^0/, '').to_i
    end
  end

  def _nt_day_ordinal
    start_index = index
    if node_cache[:day_ordinal].has_key?(index)
      cached = node_cache[:day_ordinal][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('[', false, index)
      r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r3 = nil
    end
    if r3
      r2 = r3
    else
      r2 = instantiate_node(SyntaxNode,input, index...index)
    end
    s1 << r2
    if r2
      i4 = index
      if has_terminal?('10th', false, index)
        r5 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('10th')
        r5 = nil
      end
      if r5
        r4 = r5
      else
        if has_terminal?('11th', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure('11th')
          r6 = nil
        end
        if r6
          r4 = r6
        else
          if has_terminal?('12th', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 4))
            @index += 4
          else
            terminal_parse_failure('12th')
            r7 = nil
          end
          if r7
            r4 = r7
          else
            if has_terminal?('13th', false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 4))
              @index += 4
            else
              terminal_parse_failure('13th')
              r8 = nil
            end
            if r8
              r4 = r8
            else
              if has_terminal?('14th', false, index)
                r9 = instantiate_node(SyntaxNode,input, index...(index + 4))
                @index += 4
              else
                terminal_parse_failure('14th')
                r9 = nil
              end
              if r9
                r4 = r9
              else
                if has_terminal?('15th', false, index)
                  r10 = instantiate_node(SyntaxNode,input, index...(index + 4))
                  @index += 4
                else
                  terminal_parse_failure('15th')
                  r10 = nil
                end
                if r10
                  r4 = r10
                else
                  if has_terminal?('16th', false, index)
                    r11 = instantiate_node(SyntaxNode,input, index...(index + 4))
                    @index += 4
                  else
                    terminal_parse_failure('16th')
                    r11 = nil
                  end
                  if r11
                    r4 = r11
                  else
                    if has_terminal?('17th', false, index)
                      r12 = instantiate_node(SyntaxNode,input, index...(index + 4))
                      @index += 4
                    else
                      terminal_parse_failure('17th')
                      r12 = nil
                    end
                    if r12
                      r4 = r12
                    else
                      if has_terminal?('18th', false, index)
                        r13 = instantiate_node(SyntaxNode,input, index...(index + 4))
                        @index += 4
                      else
                        terminal_parse_failure('18th')
                        r13 = nil
                      end
                      if r13
                        r4 = r13
                      else
                        if has_terminal?('19th', false, index)
                          r14 = instantiate_node(SyntaxNode,input, index...(index + 4))
                          @index += 4
                        else
                          terminal_parse_failure('19th')
                          r14 = nil
                        end
                        if r14
                          r4 = r14
                        else
                          if has_terminal?('20th', false, index)
                            r15 = instantiate_node(SyntaxNode,input, index...(index + 4))
                            @index += 4
                          else
                            terminal_parse_failure('20th')
                            r15 = nil
                          end
                          if r15
                            r4 = r15
                          else
                            if has_terminal?('21st', false, index)
                              r16 = instantiate_node(SyntaxNode,input, index...(index + 4))
                              @index += 4
                            else
                              terminal_parse_failure('21st')
                              r16 = nil
                            end
                            if r16
                              r4 = r16
                            else
                              if has_terminal?('22nd', false, index)
                                r17 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                @index += 4
                              else
                                terminal_parse_failure('22nd')
                                r17 = nil
                              end
                              if r17
                                r4 = r17
                              else
                                if has_terminal?('23rd', false, index)
                                  r18 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                  @index += 4
                                else
                                  terminal_parse_failure('23rd')
                                  r18 = nil
                                end
                                if r18
                                  r4 = r18
                                else
                                  if has_terminal?('24th', false, index)
                                    r19 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                    @index += 4
                                  else
                                    terminal_parse_failure('24th')
                                    r19 = nil
                                  end
                                  if r19
                                    r4 = r19
                                  else
                                    if has_terminal?('25th', false, index)
                                      r20 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                      @index += 4
                                    else
                                      terminal_parse_failure('25th')
                                      r20 = nil
                                    end
                                    if r20
                                      r4 = r20
                                    else
                                      if has_terminal?('26th', false, index)
                                        r21 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                        @index += 4
                                      else
                                        terminal_parse_failure('26th')
                                        r21 = nil
                                      end
                                      if r21
                                        r4 = r21
                                      else
                                        if has_terminal?('27th', false, index)
                                          r22 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                          @index += 4
                                        else
                                          terminal_parse_failure('27th')
                                          r22 = nil
                                        end
                                        if r22
                                          r4 = r22
                                        else
                                          if has_terminal?('28th', false, index)
                                            r23 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                            @index += 4
                                          else
                                            terminal_parse_failure('28th')
                                            r23 = nil
                                          end
                                          if r23
                                            r4 = r23
                                          else
                                            if has_terminal?('29th', false, index)
                                              r24 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                              @index += 4
                                            else
                                              terminal_parse_failure('29th')
                                              r24 = nil
                                            end
                                            if r24
                                              r4 = r24
                                            else
                                              if has_terminal?('30th', false, index)
                                                r25 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                                @index += 4
                                              else
                                                terminal_parse_failure('30th')
                                                r25 = nil
                                              end
                                              if r25
                                                r4 = r25
                                              else
                                                if has_terminal?('31st', false, index)
                                                  r27 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                                  @index += 4
                                                else
                                                  terminal_parse_failure('31st')
                                                  r27 = nil
                                                end
                                                if r27
                                                  r26 = r27
                                                else
                                                  r26 = instantiate_node(SyntaxNode,input, index...index)
                                                end
                                                if r26
                                                  r4 = r26
                                                else
                                                  i28, s28 = index, []
                                                  if has_terminal?('0', false, index)
                                                    r30 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                    @index += 1
                                                  else
                                                    terminal_parse_failure('0')
                                                    r30 = nil
                                                  end
                                                  if r30
                                                    r29 = r30
                                                  else
                                                    r29 = instantiate_node(SyntaxNode,input, index...index)
                                                  end
                                                  s28 << r29
                                                  if r29
                                                    if has_terminal?('1st', false, index)
                                                      r32 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                                      @index += 3
                                                    else
                                                      terminal_parse_failure('1st')
                                                      r32 = nil
                                                    end
                                                    if r32
                                                      r31 = r32
                                                    else
                                                      r31 = instantiate_node(SyntaxNode,input, index...index)
                                                    end
                                                    s28 << r31
                                                  end
                                                  if s28.last
                                                    r28 = instantiate_node(SyntaxNode,input, i28...index, s28)
                                                    r28.extend(DayOrdinal0)
                                                  else
                                                    @index = i28
                                                    r28 = nil
                                                  end
                                                  if r28
                                                    r4 = r28
                                                  else
                                                    i33, s33 = index, []
                                                    if has_terminal?('0', false, index)
                                                      r35 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                      @index += 1
                                                    else
                                                      terminal_parse_failure('0')
                                                      r35 = nil
                                                    end
                                                    if r35
                                                      r34 = r35
                                                    else
                                                      r34 = instantiate_node(SyntaxNode,input, index...index)
                                                    end
                                                    s33 << r34
                                                    if r34
                                                      if has_terminal?('2nd', false, index)
                                                        r36 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                                        @index += 3
                                                      else
                                                        terminal_parse_failure('2nd')
                                                        r36 = nil
                                                      end
                                                      s33 << r36
                                                    end
                                                    if s33.last
                                                      r33 = instantiate_node(SyntaxNode,input, i33...index, s33)
                                                      r33.extend(DayOrdinal1)
                                                    else
                                                      @index = i33
                                                      r33 = nil
                                                    end
                                                    if r33
                                                      r4 = r33
                                                    else
                                                      i37, s37 = index, []
                                                      if has_terminal?('0', false, index)
                                                        r39 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                        @index += 1
                                                      else
                                                        terminal_parse_failure('0')
                                                        r39 = nil
                                                      end
                                                      if r39
                                                        r38 = r39
                                                      else
                                                        r38 = instantiate_node(SyntaxNode,input, index...index)
                                                      end
                                                      s37 << r38
                                                      if r38
                                                        if has_terminal?('3rd', false, index)
                                                          r41 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                                          @index += 3
                                                        else
                                                          terminal_parse_failure('3rd')
                                                          r41 = nil
                                                        end
                                                        if r41
                                                          r40 = r41
                                                        else
                                                          r40 = instantiate_node(SyntaxNode,input, index...index)
                                                        end
                                                        s37 << r40
                                                      end
                                                      if s37.last
                                                        r37 = instantiate_node(SyntaxNode,input, i37...index, s37)
                                                        r37.extend(DayOrdinal2)
                                                      else
                                                        @index = i37
                                                        r37 = nil
                                                      end
                                                      if r37
                                                        r4 = r37
                                                      else
                                                        i42, s42 = index, []
                                                        if has_terminal?('0', false, index)
                                                          r44 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                          @index += 1
                                                        else
                                                          terminal_parse_failure('0')
                                                          r44 = nil
                                                        end
                                                        if r44
                                                          r43 = r44
                                                        else
                                                          r43 = instantiate_node(SyntaxNode,input, index...index)
                                                        end
                                                        s42 << r43
                                                        if r43
                                                          if has_terminal?('4th', false, index)
                                                            r45 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                                            @index += 3
                                                          else
                                                            terminal_parse_failure('4th')
                                                            r45 = nil
                                                          end
                                                          s42 << r45
                                                        end
                                                        if s42.last
                                                          r42 = instantiate_node(SyntaxNode,input, i42...index, s42)
                                                          r42.extend(DayOrdinal3)
                                                        else
                                                          @index = i42
                                                          r42 = nil
                                                        end
                                                        if r42
                                                          r4 = r42
                                                        else
                                                          i46, s46 = index, []
                                                          if has_terminal?('0', false, index)
                                                            r48 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                            @index += 1
                                                          else
                                                            terminal_parse_failure('0')
                                                            r48 = nil
                                                          end
                                                          if r48
                                                            r47 = r48
                                                          else
                                                            r47 = instantiate_node(SyntaxNode,input, index...index)
                                                          end
                                                          s46 << r47
                                                          if r47
                                                            if has_terminal?('5th', false, index)
                                                              r49 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                                              @index += 3
                                                            else
                                                              terminal_parse_failure('5th')
                                                              r49 = nil
                                                            end
                                                            s46 << r49
                                                          end
                                                          if s46.last
                                                            r46 = instantiate_node(SyntaxNode,input, i46...index, s46)
                                                            r46.extend(DayOrdinal4)
                                                          else
                                                            @index = i46
                                                            r46 = nil
                                                          end
                                                          if r46
                                                            r4 = r46
                                                          else
                                                            i50, s50 = index, []
                                                            if has_terminal?('0', false, index)
                                                              r52 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                              @index += 1
                                                            else
                                                              terminal_parse_failure('0')
                                                              r52 = nil
                                                            end
                                                            if r52
                                                              r51 = r52
                                                            else
                                                              r51 = instantiate_node(SyntaxNode,input, index...index)
                                                            end
                                                            s50 << r51
                                                            if r51
                                                              if has_terminal?('6th', false, index)
                                                                r53 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                                                @index += 3
                                                              else
                                                                terminal_parse_failure('6th')
                                                                r53 = nil
                                                              end
                                                              s50 << r53
                                                            end
                                                            if s50.last
                                                              r50 = instantiate_node(SyntaxNode,input, i50...index, s50)
                                                              r50.extend(DayOrdinal5)
                                                            else
                                                              @index = i50
                                                              r50 = nil
                                                            end
                                                            if r50
                                                              r4 = r50
                                                            else
                                                              i54, s54 = index, []
                                                              if has_terminal?('0', false, index)
                                                                r56 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                @index += 1
                                                              else
                                                                terminal_parse_failure('0')
                                                                r56 = nil
                                                              end
                                                              if r56
                                                                r55 = r56
                                                              else
                                                                r55 = instantiate_node(SyntaxNode,input, index...index)
                                                              end
                                                              s54 << r55
                                                              if r55
                                                                if has_terminal?('7th', false, index)
                                                                  r57 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                                                  @index += 3
                                                                else
                                                                  terminal_parse_failure('7th')
                                                                  r57 = nil
                                                                end
                                                                s54 << r57
                                                              end
                                                              if s54.last
                                                                r54 = instantiate_node(SyntaxNode,input, i54...index, s54)
                                                                r54.extend(DayOrdinal6)
                                                              else
                                                                @index = i54
                                                                r54 = nil
                                                              end
                                                              if r54
                                                                r4 = r54
                                                              else
                                                                i58, s58 = index, []
                                                                if has_terminal?('0', false, index)
                                                                  r60 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                  @index += 1
                                                                else
                                                                  terminal_parse_failure('0')
                                                                  r60 = nil
                                                                end
                                                                if r60
                                                                  r59 = r60
                                                                else
                                                                  r59 = instantiate_node(SyntaxNode,input, index...index)
                                                                end
                                                                s58 << r59
                                                                if r59
                                                                  if has_terminal?('8th', false, index)
                                                                    r61 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                                                    @index += 3
                                                                  else
                                                                    terminal_parse_failure('8th')
                                                                    r61 = nil
                                                                  end
                                                                  s58 << r61
                                                                end
                                                                if s58.last
                                                                  r58 = instantiate_node(SyntaxNode,input, i58...index, s58)
                                                                  r58.extend(DayOrdinal7)
                                                                else
                                                                  @index = i58
                                                                  r58 = nil
                                                                end
                                                                if r58
                                                                  r4 = r58
                                                                else
                                                                  i62, s62 = index, []
                                                                  if has_terminal?('0', false, index)
                                                                    r64 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                                    @index += 1
                                                                  else
                                                                    terminal_parse_failure('0')
                                                                    r64 = nil
                                                                  end
                                                                  if r64
                                                                    r63 = r64
                                                                  else
                                                                    r63 = instantiate_node(SyntaxNode,input, index...index)
                                                                  end
                                                                  s62 << r63
                                                                  if r63
                                                                    if has_terminal?('9th', false, index)
                                                                      r65 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                                                      @index += 3
                                                                    else
                                                                      terminal_parse_failure('9th')
                                                                      r65 = nil
                                                                    end
                                                                    s62 << r65
                                                                  end
                                                                  if s62.last
                                                                    r62 = instantiate_node(SyntaxNode,input, i62...index, s62)
                                                                    r62.extend(DayOrdinal8)
                                                                  else
                                                                    @index = i62
                                                                    r62 = nil
                                                                  end
                                                                  if r62
                                                                    r4 = r62
                                                                  else
                                                                    @index = i4
                                                                    r4 = nil
                                                                  end
                                                                end
                                                              end
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      s1 << r4
      if r4
        if has_terminal?(']', false, index)
          r67 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(']')
          r67 = nil
        end
        if r67
          r66 = r67
        else
          r66 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r66
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(DayOrdinal9)
      r1.extend(DayOrdinal10)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r68 = _nt_outwritten_day
      if r68
        r0 = r68
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:day_ordinal][start_index] = r0

    r0
  end

  module OutwrittenDay0
    def d
      elements[1]
    end

  end

  module OutwrittenDay1
    def eval(env = {})
      d.eval env
    end
  end

  def _nt_outwritten_day
    start_index = index
    if node_cache[:outwritten_day].has_key?(index)
      cached = node_cache[:outwritten_day][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      i3 = index
      r4 = _nt_first
      if r4
        r3 = r4
      else
        r5 = _nt_second
        if r5
          r3 = r5
        else
          r6 = _nt_third
          if r6
            r3 = r6
          else
            r7 = _nt_fourth
            if r7
              r3 = r7
            else
              r8 = _nt_fifth
              if r8
                r3 = r8
              else
                r9 = _nt_sixth
                if r9
                  r3 = r9
                else
                  r10 = _nt_seventh
                  if r10
                    r3 = r10
                  else
                    r11 = _nt_eighth
                    if r11
                      r3 = r11
                    else
                      r12 = _nt_ninth
                      if r12
                        r3 = r12
                      else
                        r13 = _nt_tenth
                        if r13
                          r3 = r13
                        else
                          r14 = _nt_eleventh
                          if r14
                            r3 = r14
                          else
                            r15 = _nt_twelfth
                            if r15
                              r3 = r15
                            else
                              @index = i3
                              r3 = nil
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      s0 << r3
      if r3
        if has_terminal?(']', false, index)
          r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(']')
          r17 = nil
        end
        if r17
          r16 = r17
        else
          r16 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r16
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(OutwrittenDay0)
      r0.extend(OutwrittenDay1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:outwritten_day][start_index] = r0

    r0
  end

  module First0
    def eval(env = {})
      1
    end
  end

  def _nt_first
    start_index = index
    if node_cache[:first].has_key?(index)
      cached = node_cache[:first][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('first', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 5))
      r0.extend(First0)
      @index += 5
    else
      terminal_parse_failure('first')
      r0 = nil
    end

    node_cache[:first][start_index] = r0

    r0
  end

  module Second0
    def eval(env = {})
      2
    end
  end

  def _nt_second
    start_index = index
    if node_cache[:second].has_key?(index)
      cached = node_cache[:second][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('second', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 6))
      r0.extend(Second0)
      @index += 6
    else
      terminal_parse_failure('second')
      r0 = nil
    end

    node_cache[:second][start_index] = r0

    r0
  end

  module Third0
    def eval(env = {})
      3
    end
  end

  def _nt_third
    start_index = index
    if node_cache[:third].has_key?(index)
      cached = node_cache[:third][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('third', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 5))
      r0.extend(Third0)
      @index += 5
    else
      terminal_parse_failure('third')
      r0 = nil
    end

    node_cache[:third][start_index] = r0

    r0
  end

  module Fourth0
    def eval(env = {})
      4
    end
  end

  def _nt_fourth
    start_index = index
    if node_cache[:fourth].has_key?(index)
      cached = node_cache[:fourth][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('fourth', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 6))
      r0.extend(Fourth0)
      @index += 6
    else
      terminal_parse_failure('fourth')
      r0 = nil
    end

    node_cache[:fourth][start_index] = r0

    r0
  end

  module Fifth0
    def eval(env = {})
      5
    end
  end

  def _nt_fifth
    start_index = index
    if node_cache[:fifth].has_key?(index)
      cached = node_cache[:fifth][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('fifth', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 5))
      r0.extend(Fifth0)
      @index += 5
    else
      terminal_parse_failure('fifth')
      r0 = nil
    end

    node_cache[:fifth][start_index] = r0

    r0
  end

  module Sixth0
    def eval(env = {})
      6
    end
  end

  def _nt_sixth
    start_index = index
    if node_cache[:sixth].has_key?(index)
      cached = node_cache[:sixth][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('sixth', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 5))
      r0.extend(Sixth0)
      @index += 5
    else
      terminal_parse_failure('sixth')
      r0 = nil
    end

    node_cache[:sixth][start_index] = r0

    r0
  end

  module Seventh0
    def eval(env = {})
      7
    end
  end

  def _nt_seventh
    start_index = index
    if node_cache[:seventh].has_key?(index)
      cached = node_cache[:seventh][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('seventh', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 7))
      r0.extend(Seventh0)
      @index += 7
    else
      terminal_parse_failure('seventh')
      r0 = nil
    end

    node_cache[:seventh][start_index] = r0

    r0
  end

  module Eighth0
    def eval(env = {})
      8
    end
  end

  def _nt_eighth
    start_index = index
    if node_cache[:eighth].has_key?(index)
      cached = node_cache[:eighth][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('eighth', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 6))
      r0.extend(Eighth0)
      @index += 6
    else
      terminal_parse_failure('eighth')
      r0 = nil
    end

    node_cache[:eighth][start_index] = r0

    r0
  end

  module Ninth0
    def eval(env = {})
      9
    end
  end

  def _nt_ninth
    start_index = index
    if node_cache[:ninth].has_key?(index)
      cached = node_cache[:ninth][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('ninth', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 5))
      r0.extend(Ninth0)
      @index += 5
    else
      terminal_parse_failure('ninth')
      r0 = nil
    end

    node_cache[:ninth][start_index] = r0

    r0
  end

  module Tenth0
    def eval(env = {})
      10
    end
  end

  def _nt_tenth
    start_index = index
    if node_cache[:tenth].has_key?(index)
      cached = node_cache[:tenth][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('tenth', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 5))
      r0.extend(Tenth0)
      @index += 5
    else
      terminal_parse_failure('tenth')
      r0 = nil
    end

    node_cache[:tenth][start_index] = r0

    r0
  end

  module Eleventh0
    def eval(env = {})
      11
    end
  end

  def _nt_eleventh
    start_index = index
    if node_cache[:eleventh].has_key?(index)
      cached = node_cache[:eleventh][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('eleventh', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 8))
      r0.extend(Eleventh0)
      @index += 8
    else
      terminal_parse_failure('eleventh')
      r0 = nil
    end

    node_cache[:eleventh][start_index] = r0

    r0
  end

  module Twelfth0
    def eval(env = {})
      12
    end
  end

  def _nt_twelfth
    start_index = index
    if node_cache[:twelfth].has_key?(index)
      cached = node_cache[:twelfth][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('twelfth', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 7))
      r0.extend(Twelfth0)
      @index += 7
    else
      terminal_parse_failure('twelfth')
      r0 = nil
    end

    node_cache[:twelfth][start_index] = r0

    r0
  end

  module MonthName0
    def m
      elements[1]
    end

  end

  module MonthName1
    def eval(env = {})
      m.eval env
    end
  end

  def _nt_month_name
    start_index = index
    if node_cache[:month_name].has_key?(index)
      cached = node_cache[:month_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      i3 = index
      r4 = _nt_january
      if r4
        r3 = r4
      else
        r5 = _nt_february
        if r5
          r3 = r5
        else
          r6 = _nt_march
          if r6
            r3 = r6
          else
            r7 = _nt_april
            if r7
              r3 = r7
            else
              r8 = _nt_may
              if r8
                r3 = r8
              else
                r9 = _nt_june
                if r9
                  r3 = r9
                else
                  r10 = _nt_july
                  if r10
                    r3 = r10
                  else
                    r11 = _nt_august
                    if r11
                      r3 = r11
                    else
                      r12 = _nt_september
                      if r12
                        r3 = r12
                      else
                        r13 = _nt_october
                        if r13
                          r3 = r13
                        else
                          r14 = _nt_november
                          if r14
                            r3 = r14
                          else
                            r15 = _nt_december
                            if r15
                              r3 = r15
                            else
                              @index = i3
                              r3 = nil
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      s0 << r3
      if r3
        if has_terminal?(']', false, index)
          r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(']')
          r17 = nil
        end
        if r17
          r16 = r17
        else
          r16 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r16
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(MonthName0)
      r0.extend(MonthName1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:month_name][start_index] = r0

    r0
  end

  module MonthNumber0
  end

  module MonthNumber1
  end

  module MonthNumber2
  end

  module MonthNumber3
  end

  module MonthNumber4
  end

  module MonthNumber5
  end

  module MonthNumber6
  end

  module MonthNumber7
  end

  module MonthNumber8
  end

  module MonthNumber9
  end

  module MonthNumber10
    def eval(env = {})
      text_value.gsub(/^\[/, '').gsub(/\]$/, '').gsub(/^0/, '').to_i
    end
  end

  def _nt_month_number
    start_index = index
    if node_cache[:month_number].has_key?(index)
      cached = node_cache[:month_number][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      i3 = index
      if has_terminal?('10', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('10')
        r4 = nil
      end
      if r4
        r3 = r4
      else
        if has_terminal?('11', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('11')
          r5 = nil
        end
        if r5
          r3 = r5
        else
          if has_terminal?('12', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('12')
            r6 = nil
          end
          if r6
            r3 = r6
          else
            i7, s7 = index, []
            if has_terminal?('0', false, index)
              r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('0')
              r9 = nil
            end
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s7 << r8
            if r8
              if has_terminal?('1', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('1')
                r10 = nil
              end
              s7 << r10
            end
            if s7.last
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              r7.extend(MonthNumber0)
            else
              @index = i7
              r7 = nil
            end
            if r7
              r3 = r7
            else
              i11, s11 = index, []
              if has_terminal?('0', false, index)
                r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('0')
                r13 = nil
              end
              if r13
                r12 = r13
              else
                r12 = instantiate_node(SyntaxNode,input, index...index)
              end
              s11 << r12
              if r12
                if has_terminal?('2', false, index)
                  r14 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('2')
                  r14 = nil
                end
                s11 << r14
              end
              if s11.last
                r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                r11.extend(MonthNumber1)
              else
                @index = i11
                r11 = nil
              end
              if r11
                r3 = r11
              else
                i15, s15 = index, []
                if has_terminal?('0', false, index)
                  r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('0')
                  r17 = nil
                end
                if r17
                  r16 = r17
                else
                  r16 = instantiate_node(SyntaxNode,input, index...index)
                end
                s15 << r16
                if r16
                  if has_terminal?('3', false, index)
                    r18 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('3')
                    r18 = nil
                  end
                  s15 << r18
                end
                if s15.last
                  r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
                  r15.extend(MonthNumber2)
                else
                  @index = i15
                  r15 = nil
                end
                if r15
                  r3 = r15
                else
                  i19, s19 = index, []
                  if has_terminal?('0', false, index)
                    r21 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('0')
                    r21 = nil
                  end
                  if r21
                    r20 = r21
                  else
                    r20 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s19 << r20
                  if r20
                    if has_terminal?('4', false, index)
                      r22 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure('4')
                      r22 = nil
                    end
                    s19 << r22
                  end
                  if s19.last
                    r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
                    r19.extend(MonthNumber3)
                  else
                    @index = i19
                    r19 = nil
                  end
                  if r19
                    r3 = r19
                  else
                    i23, s23 = index, []
                    if has_terminal?('0', false, index)
                      r25 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure('0')
                      r25 = nil
                    end
                    if r25
                      r24 = r25
                    else
                      r24 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s23 << r24
                    if r24
                      if has_terminal?('5', false, index)
                        r26 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure('5')
                        r26 = nil
                      end
                      s23 << r26
                    end
                    if s23.last
                      r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
                      r23.extend(MonthNumber4)
                    else
                      @index = i23
                      r23 = nil
                    end
                    if r23
                      r3 = r23
                    else
                      i27, s27 = index, []
                      if has_terminal?('0', false, index)
                        r29 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure('0')
                        r29 = nil
                      end
                      if r29
                        r28 = r29
                      else
                        r28 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s27 << r28
                      if r28
                        if has_terminal?('6', false, index)
                          r30 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure('6')
                          r30 = nil
                        end
                        s27 << r30
                      end
                      if s27.last
                        r27 = instantiate_node(SyntaxNode,input, i27...index, s27)
                        r27.extend(MonthNumber5)
                      else
                        @index = i27
                        r27 = nil
                      end
                      if r27
                        r3 = r27
                      else
                        i31, s31 = index, []
                        if has_terminal?('0', false, index)
                          r33 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure('0')
                          r33 = nil
                        end
                        if r33
                          r32 = r33
                        else
                          r32 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s31 << r32
                        if r32
                          if has_terminal?('7', false, index)
                            r34 = instantiate_node(SyntaxNode,input, index...(index + 1))
                            @index += 1
                          else
                            terminal_parse_failure('7')
                            r34 = nil
                          end
                          s31 << r34
                        end
                        if s31.last
                          r31 = instantiate_node(SyntaxNode,input, i31...index, s31)
                          r31.extend(MonthNumber6)
                        else
                          @index = i31
                          r31 = nil
                        end
                        if r31
                          r3 = r31
                        else
                          i35, s35 = index, []
                          if has_terminal?('0', false, index)
                            r37 = instantiate_node(SyntaxNode,input, index...(index + 1))
                            @index += 1
                          else
                            terminal_parse_failure('0')
                            r37 = nil
                          end
                          if r37
                            r36 = r37
                          else
                            r36 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s35 << r36
                          if r36
                            if has_terminal?('8', false, index)
                              r38 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure('8')
                              r38 = nil
                            end
                            s35 << r38
                          end
                          if s35.last
                            r35 = instantiate_node(SyntaxNode,input, i35...index, s35)
                            r35.extend(MonthNumber7)
                          else
                            @index = i35
                            r35 = nil
                          end
                          if r35
                            r3 = r35
                          else
                            i39, s39 = index, []
                            if has_terminal?('0', false, index)
                              r41 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure('0')
                              r41 = nil
                            end
                            if r41
                              r40 = r41
                            else
                              r40 = instantiate_node(SyntaxNode,input, index...index)
                            end
                            s39 << r40
                            if r40
                              if has_terminal?('9', false, index)
                                r42 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                @index += 1
                              else
                                terminal_parse_failure('9')
                                r42 = nil
                              end
                              s39 << r42
                            end
                            if s39.last
                              r39 = instantiate_node(SyntaxNode,input, i39...index, s39)
                              r39.extend(MonthNumber8)
                            else
                              @index = i39
                              r39 = nil
                            end
                            if r39
                              r3 = r39
                            else
                              @index = i3
                              r3 = nil
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      s0 << r3
      if r3
        if has_terminal?(']', false, index)
          r44 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(']')
          r44 = nil
        end
        if r44
          r43 = r44
        else
          r43 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r43
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(MonthNumber9)
      r0.extend(MonthNumber10)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:month_number][start_index] = r0

    r0
  end

  module January0
  end

  module January1
    def eval(env = {})
      1
    end
  end

  def _nt_january
    start_index = index
    if node_cache[:january].has_key?(index)
      cached = node_cache[:january][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("jan", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("jan")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-z]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(January0)
      r0.extend(January1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:january][start_index] = r0

    r0
  end

  module February0
  end

  module February1
    def eval(env = {})
      2
    end
  end

  def _nt_february
    start_index = index
    if node_cache[:february].has_key?(index)
      cached = node_cache[:february][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("feb", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("feb")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-z]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(February0)
      r0.extend(February1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:february][start_index] = r0

    r0
  end

  module March0
  end

  module March1
    def eval(env = {})
      3
    end
  end

  def _nt_march
    start_index = index
    if node_cache[:march].has_key?(index)
      cached = node_cache[:march][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("m", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("m")
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[aä]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
      if r2
        if has_terminal?("r", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("r")
          r3 = nil
        end
        s0 << r3
        if r3
          s4, i4 = [], index
          loop do
            if has_terminal?('\G[a-z]', true, index)
              r5 = true
              @index += 1
            else
              r5 = nil
            end
            if r5
              s4 << r5
            else
              break
            end
          end
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(March0)
      r0.extend(March1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:march][start_index] = r0

    r0
  end

  module April0
  end

  module April1
    def eval(env = {})
      4
    end
  end

  def _nt_april
    start_index = index
    if node_cache[:april].has_key?(index)
      cached = node_cache[:april][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("apr", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("apr")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-z]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(April0)
      r0.extend(April1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:april][start_index] = r0

    r0
  end

  module May0
  end

  module May1
    def eval(env = {})
      5
    end
  end

  def _nt_may
    start_index = index
    if node_cache[:may].has_key?(index)
      cached = node_cache[:may][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("ma", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("ma")
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[yi]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(May0)
      r0.extend(May1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:may][start_index] = r0

    r0
  end

  module June0
  end

  module June1
    def eval(env = {})
      6
    end
  end

  def _nt_june
    start_index = index
    if node_cache[:june].has_key?(index)
      cached = node_cache[:june][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("jun", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("jun")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-z]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(June0)
      r0.extend(June1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:june][start_index] = r0

    r0
  end

  module July0
  end

  module July1
    def eval(env = {})
      7
    end
  end

  def _nt_july
    start_index = index
    if node_cache[:july].has_key?(index)
      cached = node_cache[:july][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("jul", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("jul")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-z]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(July0)
      r0.extend(July1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:july][start_index] = r0

    r0
  end

  module August0
  end

  module August1
    def eval(env = {})
      8
    end
  end

  def _nt_august
    start_index = index
    if node_cache[:august].has_key?(index)
      cached = node_cache[:august][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("aug", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("aug")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-z]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(August0)
      r0.extend(August1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:august][start_index] = r0

    r0
  end

  module September0
  end

  module September1
    def eval(env = {})
      9
    end
  end

  def _nt_september
    start_index = index
    if node_cache[:september].has_key?(index)
      cached = node_cache[:september][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("sep", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("sep")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-z]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(September0)
      r0.extend(September1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:september][start_index] = r0

    r0
  end

  module October0
  end

  module October1
    def eval(env = {})
      10
    end
  end

  def _nt_october
    start_index = index
    if node_cache[:october].has_key?(index)
      cached = node_cache[:october][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("o", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("o")
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[ck]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
      if r2
        if has_terminal?("t", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("t")
          r3 = nil
        end
        s0 << r3
        if r3
          s4, i4 = [], index
          loop do
            if has_terminal?('\G[a-z]', true, index)
              r5 = true
              @index += 1
            else
              r5 = nil
            end
            if r5
              s4 << r5
            else
              break
            end
          end
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(October0)
      r0.extend(October1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:october][start_index] = r0

    r0
  end

  module November0
  end

  module November1
    def eval(env = {})
      11
    end
  end

  def _nt_november
    start_index = index
    if node_cache[:november].has_key?(index)
      cached = node_cache[:november][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("nov", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("nov")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-z]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(November0)
      r0.extend(November1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:november][start_index] = r0

    r0
  end

  module December0
  end

  module December1
    def eval(env = {})
      12
    end
  end

  def _nt_december
    start_index = index
    if node_cache[:december].has_key?(index)
      cached = node_cache[:december][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("de", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("de")
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[cz]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          if has_terminal?('\G[a-z]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(December0)
      r0.extend(December1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:december][start_index] = r0

    r0
  end

  module DayOfWeekPrefix0
  end

  module DayOfWeekPrefix1
    def day_of_week
      elements[0]
    end

  end

  def _nt_day_of_week_prefix
    start_index = index
    if node_cache[:day_of_week_prefix].has_key?(index)
      cached = node_cache[:day_of_week_prefix][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i1, s1 = index, []
    r2 = _nt_day_of_week
    s1 << r2
    if r2
      i3 = index
      r4 = _nt_space
      if r4
        r3 = r4
      else
        i5, s5 = index, []
        if has_terminal?(',', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r6 = nil
        end
        s5 << r6
        if r6
          r8 = _nt_space
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s5 << r7
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(DayOfWeekPrefix0)
        else
          @index = i5
          r5 = nil
        end
        if r5
          r3 = r5
        else
          @index = i3
          r3 = nil
        end
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(DayOfWeekPrefix1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r0 = instantiate_node(SyntaxNode,input, index...index)
    end

    node_cache[:day_of_week_prefix][start_index] = r0

    r0
  end

  module DayOfWeek0
  end

  def _nt_day_of_week
    start_index = index
    if node_cache[:day_of_week].has_key?(index)
      cached = node_cache[:day_of_week][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      i3 = index
      r4 = _nt_monday
      if r4
        r3 = r4
      else
        r5 = _nt_tuesday
        if r5
          r3 = r5
        else
          r6 = _nt_wednesday
          if r6
            r3 = r6
          else
            r7 = _nt_thursday
            if r7
              r3 = r7
            else
              r8 = _nt_friday
              if r8
                r3 = r8
              else
                r9 = _nt_saturday
                if r9
                  r3 = r9
                else
                  r10 = _nt_sunday
                  if r10
                    r3 = r10
                  else
                    @index = i3
                    r3 = nil
                  end
                end
              end
            end
          end
        end
      end
      s0 << r3
      if r3
        if has_terminal?(']', false, index)
          r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(']')
          r12 = nil
        end
        if r12
          r11 = r12
        else
          r11 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r11
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(DayOfWeek0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:day_of_week][start_index] = r0

    r0
  end

  module Monday0
  end

  def _nt_monday
    start_index = index
    if node_cache[:monday].has_key?(index)
      cached = node_cache[:monday][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("mo", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("mo")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-z]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Monday0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:monday][start_index] = r0

    r0
  end

  module Tuesday0
  end

  def _nt_tuesday
    start_index = index
    if node_cache[:tuesday].has_key?(index)
      cached = node_cache[:tuesday][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?("tue", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("tue")
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?("di", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure("di")
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      s4, i4 = [], index
      loop do
        if has_terminal?('\G[a-z]', true, index)
          r5 = true
          @index += 1
        else
          r5 = nil
        end
        if r5
          s4 << r5
        else
          break
        end
      end
      r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Tuesday0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tuesday][start_index] = r0

    r0
  end

  module Wednesday0
  end

  def _nt_wednesday
    start_index = index
    if node_cache[:wednesday].has_key?(index)
      cached = node_cache[:wednesday][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?("wed", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("wed")
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?("mi", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure("mi")
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      s4, i4 = [], index
      loop do
        if has_terminal?('\G[a-z]', true, index)
          r5 = true
          @index += 1
        else
          r5 = nil
        end
        if r5
          s4 << r5
        else
          break
        end
      end
      r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Wednesday0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:wednesday][start_index] = r0

    r0
  end

  module Thursday0
  end

  def _nt_thursday
    start_index = index
    if node_cache[:thursday].has_key?(index)
      cached = node_cache[:thursday][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?("thu", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("thu")
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?("do", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure("do")
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      s4, i4 = [], index
      loop do
        if has_terminal?('\G[a-z]', true, index)
          r5 = true
          @index += 1
        else
          r5 = nil
        end
        if r5
          s4 << r5
        else
          break
        end
      end
      r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Thursday0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:thursday][start_index] = r0

    r0
  end

  module Friday0
  end

  def _nt_friday
    start_index = index
    if node_cache[:friday].has_key?(index)
      cached = node_cache[:friday][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("fr", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("fr")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-z]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Friday0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:friday][start_index] = r0

    r0
  end

  module Saturday0
  end

  def _nt_saturday
    start_index = index
    if node_cache[:saturday].has_key?(index)
      cached = node_cache[:saturday][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("sa", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("sa")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-z]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Saturday0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:saturday][start_index] = r0

    r0
  end

  module Sunday0
  end

  def _nt_sunday
    start_index = index
    if node_cache[:sunday].has_key?(index)
      cached = node_cache[:sunday][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?("sun", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("sun")
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?("so", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure("so")
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      s4, i4 = [], index
      loop do
        if has_terminal?('\G[a-z]', true, index)
          r5 = true
          @index += 1
        else
          r5 = nil
        end
        if r5
          s4 << r5
        else
          break
        end
      end
      r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Sunday0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:sunday][start_index] = r0

    r0
  end

  module Unknown0
  end

  module Unknown1
  end

  module Unknown2
  end

  def _nt_unknown
    start_index = index
    if node_cache[:unknown].has_key?(index)
      cached = node_cache[:unknown][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    i2, s2 = index, []
    if has_terminal?('[', false, index)
      r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r3 = nil
    end
    s2 << r3
    if r3
      s4, i4 = [], index
      loop do
        if has_terminal?('?', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('?')
          r5 = nil
        end
        if r5
          s4 << r5
        else
          break
        end
      end
      if s4.empty?
        @index = i4
        r4 = nil
      else
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      end
      s2 << r4
      if r4
        if has_terminal?(']', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(']')
          r6 = nil
        end
        s2 << r6
      end
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(Unknown0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      i7, s7 = index, []
      if has_terminal?('(', false, index)
        r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('(')
        r8 = nil
      end
      s7 << r8
      if r8
        s9, i9 = [], index
        loop do
          if has_terminal?('?', false, index)
            r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('?')
            r10 = nil
          end
          if r10
            s9 << r10
          else
            break
          end
        end
        if s9.empty?
          @index = i9
          r9 = nil
        else
          r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
        end
        s7 << r9
        if r9
          if has_terminal?(')', false, index)
            r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(')')
            r11 = nil
          end
          s7 << r11
        end
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(Unknown1)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r1 = r7
      else
        s12, i12 = [], index
        loop do
          if has_terminal?('?', false, index)
            r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('?')
            r13 = nil
          end
          if r13
            s12 << r13
          else
            break
          end
        end
        if s12.empty?
          @index = i12
          r12 = nil
        else
          r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
        end
        if r12
          r1 = r12
        else
          @index = i1
          r1 = nil
        end
      end
    end
    s0 << r1
    if r1
      i15 = index
      if has_terminal?('st', false, index)
        r16 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('st')
        r16 = nil
      end
      if r16
        r15 = r16
      else
        if has_terminal?('nd', false, index)
          r17 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('nd')
          r17 = nil
        end
        if r17
          r15 = r17
        else
          if has_terminal?('rd', false, index)
            r18 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('rd')
            r18 = nil
          end
          if r18
            r15 = r18
          else
            if has_terminal?('th', false, index)
              r19 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('th')
              r19 = nil
            end
            if r19
              r15 = r19
            else
              if has_terminal?('.', false, index)
                r20 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('.')
                r20 = nil
              end
              if r20
                r15 = r20
              else
                @index = i15
                r15 = nil
              end
            end
          end
        end
      end
      if r15
        r14 = r15
      else
        r14 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r14
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Unknown2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:unknown][start_index] = r0

    r0
  end

  module Number0
  end

  module Number1
    def eval(env = {})
      text_value.to_i
    end
  end

  def _nt_number
    start_index = index
    if node_cache[:number].has_key?(index)
      cached = node_cache[:number][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('\G[1-9]', true, index)
      r2 = true
      @index += 1
    else
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        if has_terminal?('\G[0-9]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Number0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(Number1)
    else
      if has_terminal?('0', false, index)
        r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('0')
        r5 = nil
      end
      if r5
        r0 = r5
        r0.extend(Number1)
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:number][start_index] = r0

    r0
  end

  module Numeric0
  end

  module Numeric1
  end

  module Numeric2
  end

  module Numeric3
    def eval(env = {})
      text_value.to_f
    end
  end

  def _nt_numeric
    start_index = index
    if node_cache[:numeric].has_key?(index)
      cached = node_cache[:numeric][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    i2, s2 = index, []
    if has_terminal?('\G[1-9]', true, index)
      r3 = true
      @index += 1
    else
      r3 = nil
    end
    s2 << r3
    if r3
      s4, i4 = [], index
      loop do
        if has_terminal?('\G[0-9]', true, index)
          r5 = true
          @index += 1
        else
          r5 = nil
        end
        if r5
          s4 << r5
        else
          break
        end
      end
      r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      s2 << r4
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(Numeric0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('0', false, index)
        r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('0')
        r6 = nil
      end
      if r6
        r1 = r6
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      i8, s8 = index, []
      if has_terminal?('.', false, index)
        r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('.')
        r9 = nil
      end
      s8 << r9
      if r9
        s10, i10 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r11 = true
            @index += 1
          else
            r11 = nil
          end
          if r11
            s10 << r11
          else
            break
          end
        end
        if s10.empty?
          @index = i10
          r10 = nil
        else
          r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
        end
        s8 << r10
      end
      if s8.last
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        r8.extend(Numeric1)
      else
        @index = i8
        r8 = nil
      end
      if r8
        r7 = r8
      else
        r7 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r7
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Numeric2)
      r0.extend(Numeric3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:numeric][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[\\s]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:space][start_index] = r0

    r0
  end

end

class DatingParser < Treetop::Runtime::CompiledParser
  include Dating
end


