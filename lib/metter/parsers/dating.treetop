require File.expand_path("../dating_nodes", __FILE__)
require File.expand_path("../dating_include", __FILE__)

grammar Dating
  include Dating::Include

  rule expression
    space* first:dating rest:(delimiter other:dating)* ce:certainty? co:comment? space* {
      def eval(env = {})
        dates     = [first.eval(env), *rest.elements.map { |element| element.other.eval(env) }]
        certainty = ce.empty? ? 100 : ce.eval(env)
        comment   = co.empty? ? nil : co.eval(env)

        Dating::ParseResult.new dates, certainty, comment
      end
    }
  end

  rule certainty
    space '@' space? numeric '%'? {
      def eval(env = {})
        degree = numeric.eval(env)

        result =
          if degree < 1
            degree * 100
          elsif degree > 1
            degree
          else
            text_value =~ /%/ ? degree : degree * 100
          end

        result.to_i
      end
    }
  end

  rule comment
    space ('#' / '[') c:.* {
      def eval(env = {})
        if c.text_value =~ /^\s*\]?\s*$/
          nil
        else
          c.text_value.strip.gsub(/\s*\]$/, '')
        end
      end
    }
  end

  rule dating
    beginning_of_month /
    middle_of_month /
    end_of_month /
    beginning_of_year /
    middle_of_year /
    end_of_year /
    day_month_year_to_day_month_year /
    day_month_to_day_month_year /
    day_month_year /
    day_to_day_month_year /
    month_year_to_month_year /
    month_to_month_year /
    month_year /
    holiday_year /
    year_only
  end

  rule delimiter
    space? [,;/] space / space 'and' space
  end

  rule day_month_year
    day:day_number '/' month:month_name '/' year <DayMonthYear> /
    month:month_number '/' day:day_number '/' year <DayMonthYear> /
    month:month_number '.' day:day_number '.' year <DayMonthYear> /
    day_of_week_prefix ('the' space)? day space ('of' space)? month:month_name (space / space? ',' space?) year <DayMonthYear> /
    day_of_week_prefix month:month_name space ('the' space)? day (space / space? ',' space) year <DayMonthYear> /
    year '-' month:month_number '-' day <DayMonthYear>
  end

  rule month_year
    month:month_number '/' unknown '/' year <MonthYear> /
    unknown space ('of' space)? month:month_name space year <MonthYear> /
    month:month_name space ('the' space)? unknown space? ',' space? year <MonthYear> /
    year '-' month:month_number '-' unknown <MonthYear> /
    month:month_name space year <MonthYear> /
    month:month_number '/' year <MonthYear>
  end

  rule year_only
    year '-' unknown '-' unknown <YearOnly> /
    unknown '/' unknown '/' year <YearOnly> /
    unknown space unknown (space / space? ',' space?) year <YearOnly> /
    '' year <YearOnly>
  end

  rule beginning_of_month
    beginning_of month (space? ',' space? / space) year <BeginningOfMonth>
  end

  rule middle_of_month
    middle_of month (space? ',' space? / space) year <MiddleOfMonth>
  end

  rule end_of_month
    end_of month (space? ',' space? / space) year <EndOfMonth>
  end

  rule beginning_of_year
    beginning_of year <BeginningOfYear>
  end

  rule middle_of_year
    middle_of year <MiddleOfYear>
  end

  rule end_of_year
    end_of year <EndOfYear>
  end

  rule day_month_year_to_day_month_year
    ('from' space)? start:day_month_year space 'to' space stop:day_month_year <DayMonthYearToDayMonthYear> /
    start:day_month_year space? '-' space? stop:day_month_year  <DayMonthYearToDayMonthYear>
  end

  rule day_month_to_day_month_year
    ('from' space)? start_month:month_number '/' start_day:day_number space 'to' space stop:day_month_year <DayMonthToDayMonthYear> /
    ('from' space)? start_day:day space ('of' space)? start_month:month_name space 'to' space stop:day_month_year <DayMonthToDayMonthYear> /
    ('from' space)? start_month:month_name space ('the' space)? start_day:day space 'to' space stop:day_month_year <DayMonthToDayMonthYear> /
    start_month:month_number '/' start_day:day_number space? '-' space? stop:day_month_year <DayMonthToDayMonthYear> /
    start_day:day space ('of' space)? start_month:month_name space? '-' space? stop:day_month_year <DayMonthToDayMonthYear> /
    start_month:month_name space ('the' space)? start_day:day space? '-' space? stop:day_month_year <DayMonthToDayMonthYear>
  end

  rule month_year_to_month_year
    ('from' space)? start:month_year space 'to' space stop:month_year <MonthYearToMonthYear> /
    start:month_year space? '-' space? stop:month_year  <MonthYearToMonthYear>
  end

  rule month_to_month_year
    from start:month to stop:month of year <MonthToMonthYear>
  end

  rule day_to_day_month_year
    month:month_number '/' start:day_number '-' stop:day_number '/' year <DayToDayMonthYear> /
    month:month_number '.' start:day_number '-' stop:day_number '.' year <DayToDayMonthYear> /
    ('from' space)? start:day space 'to' space stop:day space ('of' space)? month:month_name space year <DayToDayMonthYear> /
    ('from' space)? month:month_name space ('the' space)? start:day space 'to' space ('the' space)? stop:day space? ',' space? year <DayToDayMonthYear> /
    ('the' space)? start:day space 'and' space stop:day space ('of' space)? month:month_name space year <DayToDayMonthYear> /
    month:month_name space ('the' space)? start:day space 'and' space ('the' space)? stop:day space? ',' space? year <DayToDayMonthYear> /
    start:day space? '-' space? stop:day space ('of' space)? month:month_name space year <DayToDayMonthYear> /
    month:month_name space ('the' space)? start:day space? '-' space? stop:day space? ',' space? year <DayToDayMonthYear>
  end

  rule holiday_year
    holiday &{ |seq| Holiday.date_defined_for?(seq[0].text_value) } space year <HolidayYear>
  end

  rule holiday
    [a-zA-Z]+ ("'" 's'?)? ([\s]+ [a-zA-Z']+)* {
      def eval(env = {})
        text_value
      end
    }
  end

  rule from
    (('in' / 'from') space)?
  end

  rule to
    space ('to' / 'and' / 'or') space / space? '-' space?
  end

  rule of
    (space 'of' / (space? ',')?) space
  end

  rule beginning_of
    (('the' space)? 'beginning of' / 'early') space
  end

  rule end_of
    (('the' space)? 'end of' / 'late') space
  end

  rule middle_of
    ('the' space)? 'middle of' space / 'mid' '-'? space?
  end

  rule year
    '['? ['Â´`]? '0'* number ']'? <Year>
  end

  rule month
    month_name / month_number
  end

  rule day
    '['? ('10' ('th' / '.')? / '11' ('th' / '.')? / '12' ('th' / '.')? / '13' ('th' / '.')? / '14' ('th' / '.')? / '15' ('th' / '.')? / '16' ('th' / '.')? / '17' ('th' / '.')? / '18' ('th' / '.')? / '19' ('th' / '.')? /
     '20' ('th' / '.')? / '21' ('st' / '.')? / '22' ('nd' / '.')? / '23' ('rd' / '.')? / '24' ('th' / '.')? / '25' ('th' / '.')? / '26' ('th' / '.')? / '27' ('th' / '.')? / '28' ('th' / '.')? / '29' ('th' / '.')? /
     '30' ('th' / '.')? / '31' ('st' / '.')? / '0'? '1' ('st' / '.')? / '0'? '2' ('nd' / '.')? / '0'? '3' ('rd' / '.')? / '0'? '4' ('th' / '.')? / '0'? '5' ('th' / '.')? / '0'? '6' ('th' / '.')? /
     '0'? '7' ('th' / '.')? / '0'? '8' ('th' / '.')? / '0'? '9' ('th' / '.')?) ']'? {
      def eval(env = {})
        text_value.gsub(/^\[/, '').gsub(/\]$/, '').gsub(/[stndr\.]/, '').gsub(/^0/, '').to_i
      end
    } / outwritten_day
  end

  rule day_number
    '['? ('10' / '11' / '12' / '13' / '14' / '15' / '16' / '17' / '18' / '19' /
     '20' / '21' / '22' / '23' / '24' / '25' / '26' / '27' / '28' / '29' /
     '30' / '31' / '0'? '1' / '0'? '2' / '0'? '3' / '0'? '4' / '0'? '5' / '0'? '6' /
     '0'? '7' / '0'? '8' / '0'? '9') ']'? {
      def eval(env = {})
        text_value.gsub(/^\[/, '').gsub(/\]$/, '').gsub(/^0/, '').to_i
      end
    }
  end

  rule day_ordinal
    '['? ('10th' / '11th' / '12th' / '13th' / '14th' / '15th' / '16th' / '17th' / '18th' / '19th' /
     '20th' / '21st' / '22nd' / '23rd' / '24th' / '25th' / '26th' / '27th' / '28th' / '29th' /
     '30th' / '31st'? / '0'? '1st'? / '0'? '2nd' / '0'? '3rd'? / '0'? '4th' / '0'? '5th' / '0'? '6th' /
     '0'? '7th' / '0'? '8th' / '0'? '9th') ']'? {
      def eval(env = {})
        text_value.gsub(/^\[/, '').gsub(/\]$/, '').gsub(/[stndr]/, '').gsub(/^0/, '').to_i
      end
    } / outwritten_day
  end

  rule outwritten_day
    '['? d:(first / second / third / fourth / fifth / sixth / seventh / eighth / ninth / tenth / eleventh / twelfth) ']'? {
      def eval(env = {})
        d.eval env
      end
    }
  end

  rule first
    'first' {
      def eval(env = {})
        1
      end
    }
  end

  rule second
    'second' {
      def eval(env = {})
        2
      end
    }
  end

  rule third
    'third' {
      def eval(env = {})
        3
      end
    }
  end

  rule fourth
    'fourth' {
      def eval(env = {})
        4
      end
    }
  end

  rule fifth
    'fifth' {
      def eval(env = {})
        5
      end
    }
  end

  rule sixth
    'sixth' {
      def eval(env = {})
        6
      end
    }
  end

  rule seventh
    'seventh' {
      def eval(env = {})
        7
      end
    }
  end

  rule eighth
    'eighth' {
      def eval(env = {})
        8
      end
    }
  end

  rule ninth
    'ninth' {
      def eval(env = {})
        9
      end
    }
  end

  rule tenth
    'tenth' {
      def eval(env = {})
        10
      end
    }
  end

  rule eleventh
    'eleventh' {
      def eval(env = {})
        11
      end
    }
  end

  rule twelfth
    'twelfth' {
      def eval(env = {})
        12
      end
    }
  end

  rule month_name
    '['? m:(january / february / march / april / may / june / july / august / september / october / november / december) ']'? {
      def eval(env = {})
        m.eval env
      end
    }
  end

  rule month_number
    '['? ('10' / '11' / '12' / '0'? '1' / '0'? '2' / '0'? '3' / '0'? '4' / '0'? '5' / '0'? '6' / '0'? '7' / '0'? '8' / '0'? '9') ']'? {
      def eval(env = {})
        text_value.gsub(/^\[/, '').gsub(/\]$/, '').gsub(/^0/, '').to_i
      end
    }
  end

  rule january
    "jan" [a-z]* {
      def eval(env = {})
        1
      end
    }
  end

  rule february
    "feb" [a-z]* {
      def eval(env = {})
        2
      end
    }
  end

  rule march
    "m" [aÃ¤] "r" [a-z]* {
      def eval(env = {})
        3
      end
    }
  end

  rule april
    "apr" [a-z]* {
      def eval(env = {})
        4
      end
    }
  end

  rule may
    "ma" [yi] {
      def eval(env = {})
        5
      end
    }
  end

  rule june
    "jun" [a-z]* {
      def eval(env = {})
        6
      end
    }
  end

  rule july
    "jul" [a-z]* {
      def eval(env = {})
        7
      end
    }
  end

  rule august
    "aug" [a-z]* {
      def eval(env = {})
        8
      end
    }
  end

  rule september
    "sep" [a-z]* {
      def eval(env = {})
        9
      end
    }
  end

  rule october
    "o" [ck] "t" [a-z]* {
      def eval(env = {})
        10
      end
    }
  end

  rule november
    "nov" [a-z]* {
      def eval(env = {})
        11
      end
    }
  end

  rule december
    "de" [cz] [a-z]* {
      def eval(env = {})
        12
      end
    }
  end

  rule day_of_week_prefix
    (day_of_week (space / ',' space?))?
  end

  rule day_of_week
    '['? (monday / tuesday / wednesday / thursday / friday / saturday / sunday) ']'?
  end

  rule monday
    "mo" [a-z]*
  end

  rule tuesday
    ("tue" / "di") [a-z]*
  end

  rule wednesday
    ("wed" / "mi") [a-z]*
  end

  rule thursday
    ("thu" / "do") [a-z]*
  end

  rule friday
    "fr" [a-z]*
  end

  rule saturday
    "sa" [a-z]*
  end

  rule sunday
    ("sun" / "so") [a-z]*
  end

  rule unknown
    ('[' '?'+ ']' / '(' '?'+ ')' / '?'+) ('st' / 'nd' / 'rd' / 'th' / '.')?
  end

  rule number
    ([1-9] [0-9]* / '0') {
      def eval(env = {})
        text_value.to_i
      end
    }
  end

  rule numeric
    ([1-9] [0-9]* / '0') ('.' [0-9]+)? {
      def eval(env = {})
        text_value.to_f
      end
    }
  end

  rule space
    [\s]+
  end
end
